var pSEngine=function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/",i(i.s=7)}([function(t,e,i){"use strict";i(1);class s{constructor(t,e,i="rgb(255, 255, 255)",s){this.x=t||0,this.y=e||0,this.z=0,this.color=i,this.setName(s)}set(t,e,i){return t instanceof s?(this.x=t.x||0,this.y=t.y||0,this.z=t.z||0,this):(this.x=t||0,this.y=t||0,this.z=t||0,this)}setName(t){return null==t||(t instanceof Text?this.name=t:this.name=new Text(t,new s(this.x,this.y))),this}equals(t,e,i){return t instanceof s?this.equals(t.x,t.y,t.z):this.x==t&&this.y==e&&this.z==i}copy(){return new s(this.x,this.y,this.z)}clear(){return this.set(0,0,0)}toString(){return`Vector Object : [${this.x}, ${this.y}, ${this.z}]`}add(t,e,i){return t instanceof s?this.add(t.x,t.y,t.z):(this.x+=t||0,this.y+=e||0,this.y+=i||0,this)}sub(t,e,i){return t instanceof s?this.sub(t.x,t.y,t.z):this.add(-t,-e,-i)}mult(t){return"number"==typeof t&&isFinite(t)?(this.x*=t,this.y*=t,this.z*=t,this):(console.warn("Vector::mult()","c is undefined or isn't a finite number"),this)}div(t){return"number"==typeof t&&isFinite(t)?0==t?(console.error("Cannot divide by 0"),this):this.mult(1/t):(console.warn("Vector::div()","c is undefined or isn't a finite number"),this)}static add(t,e){return t.copy().add(e)}static sub(t,e){return t.copy().sub(e)}static mult(t,e){return t.copy().mult(e)}static div(t,e){return t.copy().div(e)}dot(t,e,i){return t instanceof s?this.dot(t.x,t.y,t.z):this.x*(t||0)+this.y*(e||0)+this.z*(i||0)}cross(t){return new s(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}normalize(){const t=this.mag();return 0!==t&&this.div(t),this}limit(t,e){let i=this.mag();return i<t&&this.div(i).mult(t),i>e&&this.div(i).mult(e),this}mag(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}setMag(t){return this.normalize().mult(t)}rotate(t){const e=this.getAngle()+t,i=this.mag();return this.x=Math.cos(e)*i,this.y=Math.sin(e)*i,this}getAngle(){return Math.atan2(this.y,this.x)}static dist(t,e){return s.sub(t,e).mag()}static dot(t,e,i,s){return t.copy().dot(e,i,s)}static cross(t,e){return t.copy().cross(e)}static normalize(t){return t.copy().normalize()}static rotate(t,e){return t.copy().rotate(e)}draw(t,e,i){null!=t?s.draw(t,this,this.color,e,i):s.draw(void 0,this,this.color)}static draw(t,e,i="rgb(255, 255, 255)",s=5,n=1){(null!=t&&0!=t.z||0!=e.z)&&console.warn("Vector drawing is only implemented in 2D yet.");let r=_pSimulationInstance.plotter;if(push(),null!=t){let e=r.computeForXY(t.x,t.y);translate(e.x-width/2,e.y-height/2)}let o=r.computeForXY(0,0),a=r.computeForXY(e.x,e.y);if(push(),r.drawer.stroke(i).strokeWeight(n).fill(i),line(o.x,o.y,a.x,a.y),translate(a.x,a.y),rotate(a.sub(o).getAngle()),translate(-s-2,0),triangle(0,s/2,0,-s/2,s,0),pop(),null!=e.name){let t=e.getAngle();t<0&&(t+=2*PI);let o=.8*e.name.cWidth;(PI/4<t&&t<=PI/2||3*PI/4<t&&t<=5*PI/4||3*PI/2<t&&t<=7*PI/4)&&(o*=-1);let a=-1.1*e.name.desc+1.1*e.name.asc;(PI/4<t&&t<=PI/2||PI/2<t&&t<=3*PI/4||PI<t&&t<=5*PI/4||7*PI/4<t&&t<=2*PI)&&(a*=-1),e.name.setColor(i).setPosition(e.x/2,e.y/2).setOffset(o,a).draw(r.drawer);let l=r.computeForXY(e.x/2,e.y/2);r.drawer.stroke(i).strokeWeight(n).fill(i),translate(l.x+o-e.name.cWidth/2,l.y+a-e.name.asc),line(0,0,e.name.cWidth,0),push(),translate(s+e.name.cWidth/1.5,0),triangle(0,s/4,0,-s/4,s/2,0),pop()}return pop(),this}}e.a=s},function(t,e,i){"use strict";e.a=class{constructor(t,e=new Vector,i=1,s="#FFFFFF",n=!1){this.textSize=i,this.color=s,this.pos=e,this.xOffset=0,this.yOffset=0,this.showHitbox=n,this.setText(t)}draw(){let t=_pSimulationInstance.plotter.drawer,e=t.plotter.computeForXY(this.pos.x,this.pos.y);if(push(),translate(-this.svgImg.width/2+this.xOffset,this.yOffset-this.svgImg.height/2),image(this.svgImg,e.x,e.y,this.svgImg.width,this.svgImg.height),this.showHitbox){let i=this.svgImg.height,s=this.svgImg.width;t.stroke(this.color).strokeWeight(1).noFill(),line(e.x,e.y,e.x+s,e.y),line(e.x,e.y+i,e.x+s,e.y+i),line(e.x,e.y+i,e.x,e.y),line(e.x+s,e.y+i,e.x+s,e.y)}pop()}setText(t){this.text=t;let e="<svg"+MathJax.tex2svg(this.text,{display:!0,em:12,ex:6,containerWidth:480,lineWidth:1e5,scale:1}).innerHTML.split("<svg")[1].split("</svg>")[0]+"</svg>";return e=e.replace(/<g/g,'<g color="'+this.color+'"').replace(/width="(.*?)"/,'width="'+parseFloat(/width="(.*?)"/.exec(e)[1].split("ex")[0])*this.textSize+'ex"').replace(/height="(.*?)"/,'height="'+parseFloat(/height="(.*?)"/.exec(e)[1].split("ex")[0])*this.textSize+'ex"'),this.svgImg=loadImage(URL.createObjectURL(new Blob([e],{type:"image/svg+xml"}))),this}setPosition(t,e){return this.pos.x=t,this.pos.y=e,this}setOffset(t,e){return this.xOffset=t,this.yOffset=e,this}setColor(t){return this.color=t,this}}},function(t,e,i){"use strict";var s=i(3),n=i(4);e.a=class{constructor(){this.config={},this.beginTime=Date.now(),this.lastUpdateTime=Date.now(),this.lastDrawTime=Date.now(),this.config.engine=this.getDefaultEngineConfig(),this.config.custom={},window.getCustomConfig=this.getCustomConfig,window.getEngineConfig=this.getEngineConfig,this.dtMoy=this.config.engine.runner.rollbackControl.minimalUpdateFPS,this.dtTotal=0,this.dtCount=0}instanciate(){this.createP5Instance(),this.plotter=new s.a(this,new n.a),window.runSimulator(this)}createP5Instance(){let t=this.getCanvasProportions(this.config.engine.window.proportions);this.canvas=createCanvas(t.w,t.h),this.canvas.parent(this.config.engine.runner.divId);let e=this.config.engine.runner;e.UPDATE_FPS>=e.DRAW_FPS?frameRate(e.UPDATE_FPS):console.error("The Updates FPS must be superior as the Draws FPS."),window.draw=function(){let t=_pSimulationInstance,e=Date.now(),i=(e-t.lastUpdateTime)/1e3,s=t.dtMoy+t.dtMoy*t.config.engine.runner.rollbackControl.maxStandardDeviation;i>s&&(i=t.dtMoy),t.lastUpdateTime=e,t.plotter.update(i*t.config.engine.runner.simulationSpeed),e-t.lastDrawTime>=1/t.config.engine.runner.DRAW_FPS&&(i<=s&&(t.dtTotal+=i,t.dtCount+=1,t.dtCount%t.config.engine.runner.rollbackControl.averageTimeSample==0&&(t.dtMoy=t.dtTotal/t.dtCount,t.dtTotal=0,t.dtCount=0)),t.plotter.draw(),t.lastDrawTime=e)},window.windowResized=function(){let t=_pSimulationInstance.getCanvasProportions(_pSimulationInstance.config.engine.window.proportions);resizeCanvas(t.w,t.h)}}getCanvasProportions(t){let e,i;return t.isRelative?(e=windowWidth*t.width,i=windowHeight*t.height):(e=t.width+"px",i=t.height+"px"),{w:e,h:i}}addObjects(t,e=1,...i){if(t instanceof Function)for(let s=0;s<e;s++){let e=[];for(let t=0;t<i.length;t++)i[t]instanceof Array&&null!=i[t][0]&&null!=i[t][1]&&i[t][1]instanceof Function?i[t][0]==this.config.engine.runner.addingObjectsConfigKeyWords.runFunctions?e.push(i[t][1](...i[t].slice(2))):i[t][0]==this.config.engine.runner.addingObjectsConfigKeyWords.runClass&&e.push(new i[t][1](...i[t].slice(2))):e.push(i[t]);this.plotter.objectsL.push(new t(...e))}else this.plotter.objectsL.push(t);return this}getDefaultEngineConfig(){return{runner:{divId:"simulationContent",UPDATE_FPS:120,DRAW_FPS:60,simulationSpeed:1,addingObjectsConfigKeyWords:{runFunctions:"_RUN_F",runClass:"_RUN_C"},rollbackControl:{maxStandardDeviation:.8,averageTimeSample:20,minimalUpdateFPS:.15}},window:{proportions:{isRelative:!0,width:.99,height:.99}},plotter:{scale:{x:10,y:10,squareByX:!0},offset:{x:0,y:0},backgroundColor:{draw:!0,color:{r:0,g:0,b:0}},gridColor:{r:255,g:255,b:255,a:.6},displayGrid:!0}}}setEngineConfig(t){return t(this.config.engine),window.windowResized(),this}setCustomConfig(t){return t(this.config.custom),this}getEngineConfig(){return window._pSimulationInstance.config.engine}getCustomConfig(){return window._pSimulationInstance.config.custom}}},function(t,e,i){"use strict";i(0);e.a=class{constructor(t,e){this.simulator=t,this.drawer=e,this.objectsL=[],this.drawer.plotter=this}update(t){for(let e=0;e<this.objectsL.length;e++)this.objectsL[e].update(t,this.objectsL)}draw(){let t=this.simulator.config.engine.plotter,e=t.backgroundColor.color;t.backgroundColor.draw&&background(e.r,e.g,e.b);for(let t=0;t<this.objectsL.length;t++)this.objectsL[t].draw(this.drawer);if(this.simulator.config.engine.plotter.displayGrid){let e=this.computeForXY(0,0);this.drawer.noStroke().fill(t.gridColor.r,t.gridColor.g,t.gridColor.b,t.gridColor.a).ellipse(e.x,e.y,10,10)}}computeForXY(t,e){let i=this.simulator.config.engine.plotter,s=new Vector(((t+i.offset.x)/i.scale.x+1)*width/2);return i.scale.squareByX?s.y=(-e+i.offset.y)/i.scale.x*width/2+height/2:s.y=((-e+i.offset.y)/i.scale.y+1)*height/2,s}computeForXYFromPixel(t,e){let i=_pSimulationInstance.config.engine.plotter,s=new Vector((2*t/width-1)*i.scale.x-i.offset.x);return i.scale.squareByX?s.y=-(2*(e-2*height)/width*i.scale.y-i.offset.y):s.y=-((2*e/height-1)*i.scale.y-i.offset.y),s}}},function(t,e,i){"use strict";e.a=class{constructor(t){this.plotter=null}point(t,e){let i=this.plotter.computeForXY(t,e);return point(i.x,i.y),this}line(t,e,i,s){let n=this.plotter.computeForXY(t,e),r=this.plotter.computeForXY(i,s);return line(n.x,n.y,r.x,r.y),this}ellipse(t,e,i,s){let n=this.plotter.computeForXY(t,e);return ellipse(n.x,n.y,i,s),this}circle(t,e,i){return this.ellipse(t,e,i,i)}rect(t,e,i,s){let n=this.plotter.computeForXY(t,e),r=this.plotter.computeForXY(-_pSimulationInstance.config.engine.plotter.scale.x+i,_pSimulationInstance.config.engine.plotter.scale.y+s);return rect(n.x,n.y,r.x,r.y),this}stroke(t,e,i,s){return null==s?null==i?null==e?stroke(t):stroke(t,e):stroke(t,e,i):stroke(`rgba(${t}, ${e}, ${i}, ${s})`),this}strokeWeight(t){return strokeWeight(t),this}fill(t,e,i,s){return null==s?null==i?null==e?fill(t):fill(t,e):fill(t,e,i):fill(`rgba(${t}, ${e}, ${i}, ${s})`),this}noStroke(){return noStroke(),this}noFill(){return noFill(),this}}},function(t,e,i){"use strict";var s=class{constructor(t,e){this.scaleTime=1,this.isAnimating=!1,this.initialT=0,this.datas=e,this.timeLength=t,this.lastKey=this.getKey(this.update)/this.scaleTime}start(){this.isAnimating=!0,this.initialT=(new Date).getTime()/1e3}stop(){this.isAnimating=!1,this.initialT=0}getKey(t){let e=(new Date).getTime()/1e3-this.initialT;return e>this.timeLength?this.finalDraw(this):(this.lastKey=t(e,this)/this.scaleTime,this.lastKey)}updateKey(){return this.getKey(this.update)}drawKey(){return this.getKey(this.draw)}update(){}draw(){}};var n=class extends s{constructor(t,e){super(t,e),this.i=-1,this.currentShape=this.nextShape(e),this.localDt=0}nextShape(t){this.i++;let e=this.i+1;return e>t.length-1&&(e=0),[t[this.i],t[e]]}update(t,e){}draw(t,e){let i=e.timeLength/e.datas.length;null!=e.currentShape[0]&&null!=e.currentShape[1]&&t-e.localDt>=i&&(e.currentShape=e.nextShape(e.datas),e.localDt+=i),e.drawCurrentShape(e.datas,(t,e,i,s)=>{let n=1;return t==i&&(n=e/s),n},e,e.i+1,t-e.localDt,i)}finalDraw(){this.drawCurrentShape(this.datas,()=>1,this,this.datas.length,0)}drawCurrentShape(t,e,i,s,n,r){for(let o=0;o<s;o++){let s=e(o,n,i.i,r),a=o+1;a>=t.length&&(a=0),_pSimulationInstance.plotter.drawer.noFill().strokeWeight(3).stroke(255).line(t[o].pos.x,t[o].pos.y,t[o].pos.x+(t[a].pos.x-t[o].pos.x)*s,t[o].pos.y+(t[a].pos.y-t[o].pos.y)*s)}}};var r=class extends s{constructor(t,e){super(t,e),null==this.datas.min&&(this.datas.min=0),null==this.datas.max&&(this.datas.max=1)}update(t,e){let i=t/e.timeLength;return i<.5?2*i*i*(e.datas.max-e.datas.min)+e.datas.min:((4-2*i)*i-1)*(e.datas.max-e.datas.min)+e.datas.min}draw(t,e){}finalDraw(t){return t.datas.max}};e.a=class{static new(t,e=1,i={}){switch(t||(t="linear"),t){case"easeInOutCubic":return new r(e,i);case"interpolation":return new n(e,i)}}}},function(t,e,i){"use strict";i(0),i(5),i(1);e.a=class{constructor(t,e,i,s,n=6,r,o=!0){this.pos=new Vector(t,e,i,r),null!=s&&(this.pointName=new pSText(s,this.pos,18,i)),this.drawOriginVector=o,this.pointSize=n,this.pointSizeDrawing=n,this.textPadding=.4}update(){}draw(){let t=_pSimulationInstance.plotter.drawer;t.fill(parseInt(.4*this.pos.color[0]),parseInt(.4*this.pos.color[1]),parseInt(.4*this.pos.color[2])).noStroke().ellipse(this.pos.x,this.pos.y,this.pointSizeDrawing,this.pointSizeDrawing).stroke(this.pos.color).strokeWeight(1.1).noFill().ellipse(this.pos.x,this.pos.y,this.pointSizeDrawing,this.pointSizeDrawing),null!=this.pos.name&&this.drawOriginVector&&this.pos.draw(),null!=this.pointName&&(this.pointName.pos=this.pos.copy().add(0,this.textPadding),null!=this.pos.name&&this.drawOriginVector&&this.pos.y<0&&(this.pointName.pos=this.pos.copy().add(0,-this.textPadding)),this.pointName.draw(t))}handleMouseOver(t,e,i,s){}}},function(t,e,i){t.exports=i(8)},function(t,e,i){"use strict";i.r(e),function(t){i(2);var e=i(6),s=i(1),n=i(5),r=(i(4),i(3),i(0));i(10);t.pSPoint=e.a,t.pSText=s.a,t.pSAnimation=n.a,t.Vector=r.a}.call(this,i(9))},function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){"use strict";var s=i(2);var n=class{constructor(){null==window.p5&&console.error("You must import p5.js in order to run the Physics Simulation Engine.","More informations on the p5 website https://p5js.org/."),window.setup=function(){window._pSimulationInstance=new s.a,window._pSimulationInstance.instanciate()}}};new Promise((t,e)=>{"loading"===document.readyState?t():window.addEventListener("load",t,!1)}).then(()=>{new n})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,