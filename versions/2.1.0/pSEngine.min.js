var pSEngine=function(t){var i={};function e(s){if(i[s])return i[s].exports;var n=i[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,e),n.l=!0,n.exports}return e.m=t,e.c=i,e.d=function(t,i,s){e.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:s})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,i){if(1&i&&(t=e(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(e.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var n in t)e.d(s,n,function(i){return t[i]}.bind(null,n));return s},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},e.p="/",e(e.s=7)}([function(t,i,e){"use strict";e(1);class s{constructor(t,i,e="rgb(255, 255, 255)",s){this.x=t||0,this.y=i||0,this.z=0,this.color=e,this.setName(s)}set(t,i,e){return t instanceof s?(this.x=t.x||0,this.y=t.y||0,this.z=t.z||0,this):(this.x=t||0,this.y=t||0,this.z=t||0,this)}setName(t){return null==t||(t instanceof Text?this.name=t:this.name=new Text(t,new s(this.x,this.y))),this}equals(t,i,e){return t instanceof s?this.equals(t.x,t.y,t.z):this.x==t&&this.y==i&&this.z==e}copy(){return new s(this.x,this.y,this.z)}clear(){return this.set(0,0,0)}toString(){return`Vector Object : [${this.x}, ${this.y}, ${this.z}]`}add(t,i,e){return t instanceof s?this.add(t.x,t.y,t.z):(this.x+=t||0,this.y+=i||0,this.y+=e||0,this)}sub(t,i,e){return t instanceof s?this.sub(t.x,t.y,t.z):this.add(-t,-i,-e)}mult(t){return"number"==typeof t&&isFinite(t)?(this.x*=t,this.y*=t,this.z*=t,this):(console.warn("Vector::mult()","c is undefined or isn't a finite number"),this)}div(t){return"number"==typeof t&&isFinite(t)?0==t?(console.error("Cannot divide by 0"),this):this.mult(1/t):(console.warn("Vector::div()","c is undefined or isn't a finite number"),this)}static add(t,i){return t.copy().add(i)}static sub(t,i){return t.copy().sub(i)}static mult(t,i){return t.copy().mult(i)}static div(t,i){return t.copy().div(i)}dot(t,i,e){return t instanceof s?this.dot(t.x,t.y,t.z):this.x*(t||0)+this.y*(i||0)+this.z*(e||0)}cross(t){return new s(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}normalize(){const t=this.mag();return 0!==t&&this.div(t),this}limit(t,i){let e=this.mag();return e<t&&this.div(e).mult(t),e>i&&this.div(e).mult(i),this}mag(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}setMag(t){return this.normalize().mult(t)}rotate(t){const i=this.getAngle()+t,e=this.mag();return this.x=Math.cos(i)*e,this.y=Math.sin(i)*e,this}getAngle(){return Math.atan2(this.y,this.x)}static dist(t,i){return s.sub(t,i).mag()}static dot(t,i,e,s){return t.copy().dot(i,e,s)}static cross(t,i){return t.copy().cross(i)}static normalize(t){return t.copy().normalize()}static rotate(t,i){return t.copy().rotate(i)}draw(t,i,e){null!=t?s.draw(t,this,this.color,i,e):s.draw(void 0,this,this.color)}static draw(t,i,e="rgb(255, 255, 255)",s=5,n=1){(null!=t&&0!=t.z||0!=i.z)&&console.warn("Vector drawing is only implemented in 2D yet.");let o=_pSimulationInstance.plotter;if(push(),null!=t){let i=o.computeForXY(t.x,t.y);translate(i.x-width/2,i.y-height/2)}let r=o.computeForXY(0,0),a=o.computeForXY(i.x,i.y);if(push(),o.drawer.stroke(e).strokeWeight(n).fill(e),line(r.x,r.y,a.x,a.y),translate(a.x,a.y),rotate(a.sub(r).getAngle()),translate(-s-2,0),triangle(0,s/2,0,-s/2,s,0),pop(),null!=i.name){let t=i.getAngle();t<0&&(t+=2*PI);let r=.8*i.name.cWidth;(PI/4<t&&t<=PI/2||3*PI/4<t&&t<=5*PI/4||3*PI/2<t&&t<=7*PI/4)&&(r*=-1);let a=-1.1*i.name.desc+1.1*i.name.asc;(PI/4<t&&t<=PI/2||PI/2<t&&t<=3*PI/4||PI<t&&t<=5*PI/4||7*PI/4<t&&t<=2*PI)&&(a*=-1),i.name.setColor(e).setPosition(i.x/2,i.y/2).setOffset(r,a).draw(o.drawer);let h=o.computeForXY(i.x/2,i.y/2);o.drawer.stroke(e).strokeWeight(n).fill(e),translate(h.x+r-i.name.cWidth/2,h.y+a-i.name.asc),line(0,0,i.name.cWidth,0),push(),translate(s+i.name.cWidth/1.5,0),triangle(0,s/4,0,-s/4,s/2,0),pop()}return pop(),this}}i.a=s},function(t,i,e){"use strict";i.a=class{constructor(t,i,e=18,s="#FFFFFF",n=!1){this.text=t,this.textSize=e,this.color=s,this.pos=i,this.xOffset=0,this.yOffset=0,this.showHitbox=n,this.calculateValues()}draw(){let t=_pSimulationInstance.plotter.drawer,i=t.plotter.computeForXY(this.pos.x,this.pos.y);push(),textSize(this.textSize),t.noStroke().fill(this.color),translate(-this.cWidth/2+this.xOffset,(-this.desc+this.asc)/2+this.yOffset),text(this.text,i.x,i.y),this.showHitbox&&(t.stroke(this.color).strokeWeight(1).noFill(),line(i.x,i.y-this.asc,i.x+this.cWidth,i.y-this.asc),line(i.x,i.y+this.desc,i.x+this.cWidth,i.y+this.desc),line(i.x,i.y+this.desc,i.x,i.y-this.asc),line(i.x+this.cWidth,i.y+this.desc,i.x+this.cWidth,i.y-this.asc)),pop()}calculateValues(){textSize(this.textSize),this.asc=.8*textAscent(),this.desc=.8*textDescent(),this.cWidth=textWidth(this.text)}setText(t){return this.text=t,this.calculateValues(),this}setPosition(t,i){return this.pos.x=t,this.pos.y=i,this}setOffset(t,i){return this.xOffset=t,this.yOffset=i,this}setColor(t){return this.color=t,this}}},function(t,i,e){"use strict";var s=e(3),n=e(4);i.a=class{constructor(){this.config={},this.beginTime=Date.now(),this.lastUpdateTime=Date.now(),this.lastDrawTime=Date.now(),this.config.engine=this.getDefaultEngineConfig(),this.config.custom={},window.getCustomConfig=this.getCustomConfig,window.getEngineConfig=this.getEngineConfig,this.dtMoy=this.config.engine.runner.rollbackControl.minimalUpdateFPS,this.dtTotal=0,this.dtCount=0}instanciate(){this.createP5Instance(),this.plotter=new s.a(this,new n.a),window.runSimulator(this)}createP5Instance(){let t=this.getCanvasProportions(this.config.engine.window.proportions);this.canvas=createCanvas(t.w,t.h),this.canvas.parent(this.config.engine.runner.divId);let i=this.config.engine.runner;i.UPDATE_FPS>=i.DRAW_FPS?frameRate(i.UPDATE_FPS):console.error("The Updates FPS must be superior as the Draws FPS."),window.draw=function(){let t=_pSimulationInstance,i=Date.now(),e=(i-t.lastUpdateTime)/1e3,s=t.dtMoy+t.dtMoy*t.config.engine.runner.rollbackControl.maxStandardDeviation;e>s&&(e=t.dtMoy),t.lastUpdateTime=i,t.plotter.update(e*t.config.engine.runner.simulationSpeed),i-t.lastDrawTime>=1/t.config.engine.runner.DRAW_FPS&&(e<=s&&(t.dtTotal+=e,t.dtCount+=1,t.dtCount%t.config.engine.runner.rollbackControl.averageTimeSample==0&&(t.dtMoy=t.dtTotal/t.dtCount,t.dtTotal=0,t.dtCount=0)),t.plotter.draw(),t.lastDrawTime=i)},window.windowResized=function(){let t=_pSimulationInstance.getCanvasProportions(_pSimulationInstance.config.engine.window.proportions);resizeCanvas(t.w,t.h)}}getCanvasProportions(t){let i,e;return t.isRelative?(i=windowWidth*t.width,e=windowHeight*t.height):(i=t.width+"px",e=t.height+"px"),{w:i,h:e}}addObjects(t,i=1,...e){if(t instanceof Function)for(let s=0;s<i;s++){let i=[];for(let t=0;t<e.length;t++)e[t]instanceof Array&&null!=e[t][0]&&null!=e[t][1]&&e[t][1]instanceof Function?e[t][0]==this.config.engine.runner.addingObjectsConfigKeyWords.runFunctions?i.push(e[t][1](...e[t].slice(2))):e[t][0]==this.config.engine.runner.addingObjectsConfigKeyWords.runClass&&i.push(new e[t][1](...e[t].slice(2))):i.push(e[t]);this.plotter.objectsL.push(new t(...i))}else this.plotter.objectsL.push(t);return this}getDefaultEngineConfig(){return{runner:{divId:"simulationContent",UPDATE_FPS:120,DRAW_FPS:60,simulationSpeed:1,addingObjectsConfigKeyWords:{runFunctions:"_RUN_F",runClass:"_RUN_C"},rollbackControl:{maxStandardDeviation:.8,averageTimeSample:20,minimalUpdateFPS:.15}},window:{proportions:{isRelative:!0,width:.99,height:.99}},plotter:{scale:{x:10,y:10,squareByX:!0},offset:{x:0,y:0},backgroundColor:{draw:!0,color:{r:0,g:0,b:0}},gridColor:{r:255,g:255,b:255,a:.6},displayGrid:!0}}}setEngineConfig(t){return t(this.config.engine),window.windowResized(),this}setCustomConfig(t){return t(this.config.custom),this}getEngineConfig(){return window._pSimulationInstance.config.engine}getCustomConfig(){return window._pSimulationInstance.config.custom}}},function(t,i,e){"use strict";e(0);i.a=class{constructor(t,i){this.simulator=t,this.drawer=i,this.objectsL=[],this.drawer.plotter=this}update(t){for(let i=0;i<this.objectsL.length;i++)this.objectsL[i].update(t,this.objectsL)}draw(){let t=this.simulator.config.engine.plotter,i=t.backgroundColor.color;t.backgroundColor.draw&&background(i.r,i.g,i.b);for(let t=0;t<this.objectsL.length;t++)this.objectsL[t].draw(this.drawer);if(this.simulator.config.engine.plotter.displayGrid){let i=this.computeForXY(0,0);this.drawer.noStroke().fill(t.gridColor.r,t.gridColor.g,t.gridColor.b,t.gridColor.a).ellipse(i.x,i.y,10,10)}}computeForXY(t,i){let e=this.simulator.config.engine.plotter,s=new Vector(((t+e.offset.x)/e.scale.x+1)*width/2);return e.scale.squareByX?s.y=(-i+e.offset.y)/e.scale.x*width/2+height/2:s.y=((-i+e.offset.y)/e.scale.y+1)*height/2,s}}},function(t,i,e){"use strict";i.a=class{constructor(t){this.plotter=null}point(t,i){let e=this.plotter.computeForXY(t,i);return point(e.x,e.y),this}line(t,i,e,s){let n=this.plotter.computeForXY(t,i),o=this.plotter.computeForXY(e,s);return line(n.x,n.y,o.x,o.y),this}ellipse(t,i,e,s){let n=this.plotter.computeForXY(t,i);return ellipse(n.x,n.y,e,s),this}circle(t,i,e){return this.ellipse(t,i,e,e)}stroke(t,i,e,s){return null==s?null==e?null==i?stroke(t):stroke(t,i):stroke(t,i,e):stroke(`rgba(${t}, ${i}, ${e}, ${s})`),this}strokeWeight(t){return strokeWeight(t),this}fill(t,i,e,s){return null==s?null==e?null==i?fill(t):fill(t,i):fill(t,i,e):fill(`rgba(${t}, ${i}, ${e}, ${s})`),this}noStroke(){return noStroke(),this}noFill(){return noFill(),this}}},function(t,i,e){"use strict";i.a=class{constructor(t,i=.1){switch(t||(t="linear"),t){case"linear":this.f=t=>t;break;case"easeInOutCubic":this.f=function(t){return(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1)}}this.scaleTime=i,this.isAnimating=!1,this.initialT=0,this.timeDirection=1}start(){this.isAnimating=!0,this.initialT=(new Date).getTime()/1e3}stop(){this.isAnimating=!1,this.initialT=0}reverse(){this.timeDirection*=-1}nextKey(){let t=(new Date).getTime(),i=t/1e3-this.initialT;return this.timeDirection<0&&(i=t),i>1*this.scaleTime&&this.timeDirection>0||i<1*this.scaleTime&&this.timeDirection<0||(this.lastKey=this.f(i)/this.scaleTime),this.lastKey}}},function(t,i,e){"use strict";e(0),e(5),e(1);i.a=class{constructor(t,i,e,s,n=6,o,r=!0){this.pos=new Vector(t,i,e,o),null!=s&&(this.pointName=new Text(s,this.pos,18,e)),this.drawOriginVector=r,this.pointSize=n,this.pointSizeDrawing=n,this.animation=new Animation("easeInOutCubic"),this.textPadding=.4}update(){}draw(){let t=_pSimulationInstance.plotter.drawer;t.fill(parseInt(.4*this.pos.color[0]),parseInt(.4*this.pos.color[1]),parseInt(.4*this.pos.color[2])).noStroke().ellipse(this.pos.x,this.pos.y,this.pointSizeDrawing,this.pointSizeDrawing).stroke(this.pos.color).strokeWeight(1.1).noFill().ellipse(this.pos.x,this.pos.y,this.pointSizeDrawing,this.pointSizeDrawing),null!=this.pos.name&&this.drawOriginVector&&this.pos.draw(),null!=this.pointName&&(this.pointName.pos=this.pos.copy().add(0,this.textPadding),null!=this.pos.name&&this.drawOriginVector&&this.pos.y<0&&(this.pointName.pos=this.pos.copy().add(0,-this.textPadding)),this.pointName.draw(t))}handleMouseOver(t,i,e,s){this.pos.x>t&&i>this.pos.x&&this.pos.y>e&&s>this.pos.y?(this.animation.isAnimating||this.animation.start(),this.pointSizeDrawing=this.pointSize+100*this.animation.nextKey()):(this.animation.stop(),this.pointSizeDrawing=this.pointSize)}}},function(t,i,e){t.exports=e(8)},function(t,i,e){"use strict";e.r(i),function(t){e(2);var i=e(6),s=e(1),n=e(5),o=(e(4),e(3),e(0));e(10);t.Point=i.a,t.Text=s.a,t.Animation=n.a,t.Vector=o.a}.call(this,e(9))},function(t,i){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,i,e){"use strict";var s=e(2);var n=class{constructor(){null==window.p5&&console.error("You must import p5.js in order to run the Physics Simulation Engine.","More informations on the p5 website https://p5js.org/."),window.setup=function(){window._pSimulationInstance=new s.a,window._pSimulationInstance.instanciate()}}};new Promise((t,i)=>{"loading"===document.readyState?t():window.addEventListener("load",t,!1)}).then(()=>{new n})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,