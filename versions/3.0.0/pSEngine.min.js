var pSEngine=function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/",i(i.s=9)}([function(t,e,i){"use strict";i(1);class s{constructor(t,e,i,s="rgb(255, 255, 255)",n){this.x=t||0,this.y=e||0,this.z=i||0,this.color=s,this.setName(n)}set(t,e,i){return t instanceof s?(this.x=t.x||0,this.y=t.y||0,this.z=t.z||0,this):(this.x=t||0,this.y=t||0,this.z=t||0,this)}setName(t){return null==t||(t instanceof pSText?this.name=t:this.name=new pSText(t,new s(this.x,this.y,this.z))),this}equals(t,e,i){return t instanceof s?this.equals(t.x,t.y,t.z):this.x==t&&this.y==e&&this.z==i}copy(){return new s(this.x,this.y,this.z)}clear(){return this.set(0,0,0)}toString(){return`Vector Object : [${this.x}, ${this.y}, ${this.z}]`}add(t,e,i){return t instanceof s?this.add(t.x,t.y,t.z):(this.x+=t||0,this.y+=e||0,this.z+=i||0,this)}sub(t,e,i){return t instanceof s?this.sub(t.x,t.y,t.z):this.add(-t,-e,-i)}mult(t){return"number"==typeof t&&isFinite(t)?(this.x*=t,this.y*=t,this.z*=t,this):(console.warn("Vector::mult()","c is undefined or isn't a finite number"),this)}div(t){return"number"==typeof t&&isFinite(t)?0==t?(console.error("Cannot divide by 0"),this):this.mult(1/t):(console.warn("Vector::div()","c is undefined or isn't a finite number"),this)}static add(t,e){return t.copy().add(e)}static sub(t,e){return t.copy().sub(e)}static mult(t,e){return t.copy().mult(e)}static div(t,e){return t.copy().div(e)}dot(t,e,i){return t instanceof s?this.dot(t.x,t.y,t.z):this.x*(t||0)+this.y*(e||0)+this.z*(i||0)}cross(t){return new s(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}normalize(){const t=this.mag();return 0!==t&&this.div(t),this}limit(t,e){let i=this.mag();return i<t&&this.div(i).mult(t),i>e&&this.div(i).mult(e),this}mag(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}setMag(t){return this.normalize().mult(t)}rotate(t){const e=this.getAngle()+t,i=this.mag();return this.x=Math.cos(e)*i,this.y=Math.sin(e)*i,this}getAngle(){return Math.atan2(this.y,this.x)}static dist(t,e){return s.sub(t,e).mag()}static dot(t,e,i,s){return t.copy().dot(e,i,s)}static cross(t,e){return t.copy().cross(e)}static normalize(t){return t.copy().normalize()}static rotate(t,e){return t.copy().rotate(e)}draw(t,e,i){null!=t?s.draw(t,this,this.color,e,i):s.draw(void 0,this,this.color)}static draw(t,e,i="rgb(255, 255, 255)",s=5,n=1){(null!=t&&0!=t.z||0!=e.z)&&console.warn("Vector drawing is only implemented in 2D yet.");let o=_pSimulationInstance.plotter;if(push(),null!=t){let e=o.computeForXYZ(t.x,t.y,t.z);translate(e.x-width/2,e.y-height/2)}let r=o.computeForXYZ(0,0,0),a=o.computeForXYZ(e.x,e.y,e.z);if(push(),o.drawer.stroke(i).strokeWeight(n).fill(i),line(r.x,r.y,a.x,a.y),translate(a.x,a.y),rotate(a.sub(r).getAngle()),translate(-s-2,0),triangle(0,s/2,0,-s/2,s,0),pop(),null!=e.name){let t=e.getAngle();t<0&&(t+=2*PI);let r=.8*e.name.cWidth;(PI/4<t&&t<=PI/2||3*PI/4<t&&t<=5*PI/4||3*PI/2<t&&t<=7*PI/4)&&(r*=-1);let a=-1.1*e.name.desc+1.1*e.name.asc;(PI/4<t&&t<=PI/2||PI/2<t&&t<=3*PI/4||PI<t&&t<=5*PI/4||7*PI/4<t&&t<=2*PI)&&(a*=-1),e.name.setColor(i).setPosition(e.x/2,e.y/2).setOffset(r,a).draw(o.drawer);let h=o.computeForXY(e.x/2,e.y/2);o.drawer.stroke(i).strokeWeight(n).fill(i),translate(h.x+r-e.name.cWidth/2,h.y+a-e.name.asc),line(0,0,e.name.cWidth,0),push(),translate(s+e.name.cWidth/1.5,0),triangle(0,s/4,0,-s/4,s/2,0),pop()}return pop(),this}}e.a=s},function(t,e,i){"use strict";e.a=class{constructor(t,e=new Vector,i=1,s="#FFFFFF",n=!1){null==window.MathJax&&console.error("You must import MathJax.js >=3.0.0 in order to use Text and Tex strings."),this.textSize=i,this.color=s,this.pos=e,this.showHitbox=n,this.setText(t)}draw(){let t=_pSimulationInstance.plotter.drawer,e=t.plotter.computeForXYZ(this.pos.x,this.pos.y);if(push(),translate(-this.svgImg.width/2,-this.svgImg.height/2),image(this.svgImg,e.x,e.y,this.svgImg.width,this.svgImg.height),this.showHitbox){let i=this.svgImg.height,s=this.svgImg.width;t.stroke(this.color).strokeWeight(1).noFill(),line(e.x,e.y,e.x+s,e.y),line(e.x,e.y+i,e.x+s,e.y+i),line(e.x,e.y+i,e.x,e.y),line(e.x+s,e.y+i,e.x+s,e.y)}pop()}setText(t){this.text=t;let e="<svg"+MathJax.tex2svg(this.text,{display:!0,em:12,ex:6,containerWidth:480,lineWidth:1e5,scale:1}).innerHTML.split("<svg")[1].split("</svg>")[0]+"</svg>";return e=e.replace(/<g/g,'<g color="'+this.color+'"').replace(/width="(.*?)"/,'width="'+parseFloat(/width="(.*?)"/.exec(e)[1].split("ex")[0])*this.textSize+'ex"').replace(/height="(.*?)"/,'height="'+parseFloat(/height="(.*?)"/.exec(e)[1].split("ex")[0])*this.textSize+'ex"'),this.svgImg=loadImage(URL.createObjectURL(new Blob([e],{type:"image/svg+xml"}))),this}setPosition(t,e){return this.pos.x=t,this.pos.y=e,this}setColor(t){return this.color=t,this}}},function(t,e,i){"use strict";var s=class{constructor(t,e){this.scaleTime=1,this.isAnimating=!1,this.initialT=0,this.datas=e,this.timeLength=t,this.lastKey=this.getKey(this.update)/this.scaleTime}start(){this.isAnimating=!0,this.initialT=(new Date).getTime()/1e3}stop(){this.isAnimating=!1,this.initialT=0}getKey(t){let e=(new Date).getTime()/1e3-this.initialT;return e>this.timeLength?this.finalDraw(this):(this.lastKey=t(e,this)/this.scaleTime,this.lastKey)}updateKey(){return this.getKey(this.update)}drawKey(){return this.getKey(this.draw)}update(){}draw(){}};var n=class extends s{constructor(t,e){super(t,e),this.i=-1,this.currentShape=this.nextShape(e),this.localDt=0}nextShape(t){this.i++;let e=this.i+1;return e>t.length-1&&(e=0),[t[this.i],t[e]]}update(t,e){}draw(t,e){let i=e.timeLength/e.datas.length;null!=e.currentShape[0]&&null!=e.currentShape[1]&&t-e.localDt>=i&&(e.currentShape=e.nextShape(e.datas),e.localDt+=i),e.drawCurrentShape(e.datas,(t,e,i,s)=>{let n=1;return t==i&&(n=e/s),n},e,e.i+1,t-e.localDt,i)}finalDraw(t){this.drawCurrentShape(this.datas,()=>1,this,this.datas.length,0)}drawCurrentShape(t,e,i,s,n,o){for(let r=0;r<s;r++){let s=e(r,n,i.i,o),a=r+1;a>=t.length&&(a=0),_pSimulationInstance.plotter.drawer.noFill().strokeWeight(3).stroke(255).line(t[r].pos.x,t[r].pos.y,t[r].pos.x+(t[a].pos.x-t[r].pos.x)*s,t[r].pos.y+(t[a].pos.y-t[r].pos.y)*s)}}};var o=class extends s{constructor(t,e){super(t,e),null==this.datas.min&&(this.datas.min=0),null==this.datas.max&&(this.datas.max=1)}update(t,e){let i=t/e.timeLength;return i<.5?2*i*i*(e.datas.max-e.datas.min)+e.datas.min:((4-2*i)*i-1)*(e.datas.max-e.datas.min)+e.datas.min}draw(t,e){}finalDraw(t){return t.datas.max}};e.a=class{static new(t,e=1,i={}){switch(t||(t="easeInOutCubic"),t){case"easeInOutCubic":return new o(e,i);case"interpolation":return new n(e,i)}}}},function(t,e,i){"use strict";i(0);e.a=class{constructor(t,e){this.simulator=t,this.drawer=e,this.objectsL=[],this.drawer.plotter=this}update(t){for(let e=0;e<this.objectsL.length;e++)this.objectsL[e].update(t,this.objectsL)}draw(){let t=this.simulator.config.engine.plotter,e=t.backgroundColor.color;t.backgroundColor.draw&&background(e.r,e.g,e.b);for(let t=0;t<this.objectsL.length;t++)this.objectsL[t].draw(this.drawer);if(this.simulator.config.engine.plotter.displayGrid){this.drawer.noFill().stroke(t.gridColor.r,t.gridColor.g,t.gridColor.b,t.gridColor.a).strokeWeight(.5);let e=Math.round(height/t.scale.y/2);t.squareByX||(e=t.scale.y);for(let i=-t.scale.x-1;i<t.scale.x+1;i++)for(let s=-e-1;s<e+1;s++)this.drawer.rect(i+t.offset.x,s+t.offset.y,1,1);this.drawer.noFill().stroke(t.gridColor.r,t.gridColor.g,t.gridColor.b,t.gridColor.a+.3).strokeWeight(2).line(-t.scale.x+t.offset.x-1,0,t.scale.x+t.offset.x+1,0),t.squareByX?this.drawer.line(0,-e-1,0,e+1):this.drawer.line(0,-t.scale.y-1,0,t.scale.y+1)}}computeForXYZ(t,e,i){let s=this.simulator.config.engine.plotter,n=new Vector(((t-s.offset.x)/s.scale.x+1)*width/2,0,((t+s.offset.z)/s.scale.z+1)*width/2);return s.squareByX?n.y=(-e+s.offset.y)/s.scale.x*width/2+height/2:n.y=((-e+s.offset.y)/s.scale.y+1)*height/2,n}computeForXYFromPixel(t,e){let i=_pSimulationInstance.config.engine.plotter,s=new Vector((2*t/width-1)*i.scale.x+i.offset.x);return i.squareByX?s.y=-((2*e/height-1)*i.scale.y-i.offset.y):s.y=-(2*(e-2*height)/width*i.scale.y-i.offset.y),s}}},function(t,e,i){"use strict";var s=i(3),n=i(5),o=i(6);e.a=class{constructor(){this.config={},this.beginTime=Date.now(),this.lastUpdateTime=Date.now(),this.lastDrawTime=Date.now(),this.config.engine=this.getDefaultEngineConfig(),this.config.custom={},window.getCustomConfig=this.getCustomConfig,window.getEngineConfig=this.getEngineConfig,this.dtMoy=this.config.engine.runner.rollbackControl.minimalUpdateFPS,this.dtTotal=0,this.dtCount=0}instanciate(){window.preRunSimulator(this),this.createP5Instance(),this.config.engine.plotter.is_3D?this.plotter=new s.a(this,new o.a):this.plotter=new s.a(this,new n.a),this.mousePos=this.plotter.computeForXYFromPixel(mouseX,mouseY),window.runSimulator(this)}createP5Instance(){let t=this.getCanvasProportions(this.config.engine.window.proportions);this.config.engine.plotter.is_3D?this.canvas=createCanvas(t.w,t.h,WEBGL):this.canvas=createCanvas(t.w,t.h),this.canvas.parent(this.config.engine.runner.divId);let e=this.config.engine.runner;e.UPDATE_FPS>=e.DRAW_FPS?frameRate(e.UPDATE_FPS):console.error("The Updates FPS must be superior as the Draws FPS."),window.draw=function(){let t=_pSimulationInstance,e=Date.now(),i=(e-t.lastUpdateTime)/1e3,s=t.dtMoy+t.dtMoy*t.config.engine.runner.rollbackControl.maxStandardDeviation;t.mousePos=t.plotter.computeForXYFromPixel(mouseX,mouseY),i>s&&(i=t.dtMoy),t.lastUpdateTime=e,t.plotter.update(i*t.config.engine.runner.simulationSpeed),e-t.lastDrawTime>=1/t.config.engine.runner.DRAW_FPS&&(i<=s&&(t.dtTotal+=i,t.dtCount+=1,t.dtCount%t.config.engine.runner.rollbackControl.averageTimeSample==0&&(t.dtMoy=t.dtTotal/t.dtCount,t.dtTotal=0,t.dtCount=0)),t.plotter.draw(),t.lastDrawTime=e)},window.windowResized=function(){let t=_pSimulationInstance.getCanvasProportions(_pSimulationInstance.config.engine.window.proportions);resizeCanvas(t.w,t.h)},window.mouseDragged=function(){if(!_pSimulationInstance.config.engine.runner.movable)return;let t=_pSimulationInstance.plotter.computeForXYFromPixel(mouseX,mouseY);_pSimulationInstance.mousePos.equals(t)||(_pSimulationInstance.config.engine.plotter.offset.x-=t.x-_pSimulationInstance.mousePos.x,_pSimulationInstance.config.engine.plotter.offset.y-=t.y-_pSimulationInstance.mousePos.y)}}getCanvasProportions(t){let e,i;return t.isRelative?(e=windowWidth*t.width,i=windowHeight*t.height):(e=t.width+"px",i=t.height+"px"),{w:e,h:i}}addObjects(t,e=1,...i){if(t instanceof Function)for(let s=0;s<e;s++){let e=[];for(let t=0;t<i.length;t++)i[t]instanceof Array&&null!=i[t][0]&&null!=i[t][1]&&i[t][1]instanceof Function?i[t][0]==this.config.engine.runner.addingObjectsConfigKeyWords.runFunctions?e.push(i[t][1](...i[t].slice(2))):i[t][0]==this.config.engine.runner.addingObjectsConfigKeyWords.runClass&&e.push(new i[t][1](...i[t].slice(2))):e.push(i[t]);this.plotter.objectsL.push(new t(...e))}else this.plotter.objectsL.push(t);return this}getDefaultEngineConfig(){return{runner:{divId:"simulationContent",UPDATE_FPS:120,DRAW_FPS:60,simulationSpeed:1,addingObjectsConfigKeyWords:{runFunctions:"_RUN_F",runClass:"_RUN_C"},rollbackControl:{maxStandardDeviation:.8,averageTimeSample:20,minimalUpdateFPS:.15},is_movable:!1},window:{proportions:{isRelative:!0,width:.99,height:.99}},plotter:{scale:{x:10,y:10,z:10},offset:{x:0,y:0,z:0},backgroundColor:{draw:!0,color:{r:0,g:0,b:0}},squareByX:!1,is_3D:!1,gridColor:{r:255,g:255,b:255,a:.3},displayGrid:!1}}}setPreEngineConfig(t){return t(this.config.engine),this}setEngineConfig(t){return t(this.config.engine),window.windowResized(),this}setCustomConfig(t){return t(this.config.custom),this}getEngineConfig(){return window._pSimulationInstance.config.engine}getCustomConfig(){return window._pSimulationInstance.config.custom}getPSEngineVar(){}}},function(t,e,i){"use strict";e.a=class{constructor(t){this.plotter=null}point(t,e){let i=this.plotter.computeForXYZ(t,e);return point(i.x,i.y),this}line(t,e,i,s){let n=this.plotter.computeForXYZ(t,e),o=this.plotter.computeForXYZ(i,s);return line(n.x,n.y,o.x,o.y),this}ellipse(t,e,i,s){let n=this.plotter.computeForXYZ(t,e);return ellipse(n.x,n.y,i,s),this}circle(t,e,i){return this.ellipse(t,e,i,i)}rect(t,e,i,s){let n=this.plotter.simulator.config.engine.plotter,o=this.plotter.computeForXYZ(i-n.scale.x+n.offset.x,0).x,r=this.plotter.computeForXYZ(s-n.scale.x+n.offset.x,s-n.scale.y+n.offset.y);return r=n.squareByX?r.x:r.y,this.push().translate(t-n.offset.x,e-n.offset.y).beginShape(),vertex(0,0),vertex(o,0),vertex(o,-r),vertex(0,-r),this.endShape(CLOSE).pop(),this}stroke(t,e,i,s){return null==s?null==i?null==e?stroke(t):stroke(t,e):stroke(t,e,i):stroke(`rgba(${t}, ${e}, ${i}, ${s})`),this}strokeWeight(t){return strokeWeight(t),this}fill(t,e,i,s){return null==s?null==i?null==e?fill(t):fill(t,e):fill(t,e,i):fill(`rgba(${t}, ${e}, ${i}, ${s})`),this}translate(t,e){let i=this.plotter.computeForXYZ(t,e);return translate(i.x,i.y),this}beginShape(t){return beginShape(t),this}endShape(t){return endShape(t),this}vertex(t,e){let i=this.plotter.computeForXYZ(t,e);return vertex(i.x,i.y),this}pop(){return pop(),this}push(){return push(),this}noStroke(){return noStroke(),this}noFill(){return noFill(),this}}},function(t,e,i){"use strict";e.a=class{constructor(t){this.plotter=null}}},function(t,e,i){"use strict";i(0),i(2),i(1);e.a=class{constructor(t,e,i="white",s,n=6,o,r=!0){this.pos=new Vector(t,e,i,o),null!=s&&(this.pointName=new pSText(s,this.pos,18,i)),this.drawOriginVector=r,this.pointSize=n,this.pointSizeDrawing=n,this.textPadding=.4}update(t){}draw(){let t=_pSimulationInstance.plotter.drawer;t.fill(parseInt(.4*this.pos.color[0]),parseInt(.4*this.pos.color[1]),parseInt(.4*this.pos.color[2])).noStroke().ellipse(this.pos.x,this.pos.y,this.pointSizeDrawing,this.pointSizeDrawing).stroke(this.pos.color).strokeWeight(1.1).noFill().ellipse(this.pos.x,this.pos.y,this.pointSizeDrawing,this.pointSizeDrawing),null!=this.pos.name&&this.drawOriginVector&&this.pos.draw(),null!=this.pointName&&(this.pointName.pos=this.pos.copy().add(0,this.textPadding),null!=this.pos.name&&this.drawOriginVector&&this.pos.y<0&&(this.pointName.pos=this.pos.copy().add(0,-this.textPadding)),this.pointName.draw(t))}}},function(t,e,i){"use strict";i(0),i(2),i(1);e.a=class{constructor(t,e=new Vector,i=new Vector,s="white",n="none",o=1){this.setCoordinates(t,e,i),this.fillColor=s,this.strokeColor=n,this.strokeWeight=o}setCoordinates(t,e,i){this.p0=t||new Vector(t.x,t.y),this.p1=null==e?this.p1:new Vector(e.x,e.y),this.p2=null==i?this.p2:new Vector(i.x,i.y),this.pG=Vector.div(Vector.add(Vector.add(this.p0,this.p1),this.p2),3),this.v0=Vector.sub(this.p0,this.pG),this.v1=Vector.sub(this.p1,this.pG),this.v2=Vector.sub(this.p2,this.pG)}rotate(t){this.v0.rotate(t),this.v1.rotate(t),this.v2.rotate(t),this.p0=Vector.add(this.v0,this.pG),this.p1=Vector.add(this.v1,this.pG),this.p2=Vector.add(this.v2,this.pG)}translate(t,e){return this.setCoordinates(Vector.add(this.p0,new Vector(t,e)),Vector.add(this.p1,new Vector(t,e)),Vector.add(this.p2,new Vector(t,e))),this}translate(t){return this.translate(t.x,t.y),this}update(t){}draw(){let t=_pSimulationInstance.plotter.drawer;"none"==this.fillColor?t.noFill():t.fill(this.fillColor),"none"==this.strokeColor?t.noStroke():t.stroke(this.strokeColor).strokeWeight(this.strokeWeight),t.push().beginShape().vertex(this.p0.x,this.p0.y).vertex(this.p1.x,this.p1.y).vertex(this.p2.x,this.p2.y).vertex(this.p0.x,this.p0.y).endShape().pop()}}},function(t,e,i){t.exports=i(10)},function(t,e,i){"use strict";i.r(e),function(t){i(4);var e=i(7),s=i(1),n=i(8),o=i(2),r=(i(5),i(6),i(3),i(0));i(12);t.pSPoint=e.a,t.pSText=s.a,t.pSTriangle=n.a,t.pSAnimation=o.a,t.Vector=r.a}.call(this,i(11))},function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){"use strict";var s=i(4);var n=class{constructor(){null==window.p5&&console.error("You must import p5.js in order to run the Physics Simulation Engine.","More informations on the p5 website https://p5js.org/."),window.setup=function(){window._pSimulationInstance=new s.a,window._pSimulationInstance.instanciate(),window.pSEngine=window._pSimulationInstance.getPSEngineVar()}}};new Promise((t,e)=>{"loading"===document.readyState?t():window.addEventListener("load",t,!1)}).then(()=>{new n})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wU0VuZ2luZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9wU0VuZ2luZS8uL3NyYy91dGlsaXRpZXMvVmVjdG9yLmpzIiwid2VicGFjazovL3BTRW5naW5lLy4vc3JjL2RyYXdlci9vYmplY3RzL1RleHQuanMiLCJ3ZWJwYWNrOi8vcFNFbmdpbmUvLi9zcmMvZHJhd2VyL2FuaW1hdGlvbnMvcFNBbmltYXRpb25IYW5kbGVyLmpzIiwid2VicGFjazovL3BTRW5naW5lLy4vc3JjL2RyYXdlci9hbmltYXRpb25zL3BTSW50ZXJwb2xhdGlvbi5qcyIsIndlYnBhY2s6Ly9wU0VuZ2luZS8uL3NyYy9kcmF3ZXIvYW5pbWF0aW9ucy9wU0Vhc2VJbk91dEN1YmljLmpzIiwid2VicGFjazovL3BTRW5naW5lLy4vc3JjL2RyYXdlci9BbmltYXRpb24uanMiLCJ3ZWJwYWNrOi8vcFNFbmdpbmUvLi9zcmMvZHJhd2VyL1Bsb3R0ZXIuanMiLCJ3ZWJwYWNrOi8vcFNFbmdpbmUvLi9zcmMvY29yZS9TaW11bGF0b3IuanMiLCJ3ZWJwYWNrOi8vcFNFbmdpbmUvLi9zcmMvZHJhd2VyL0RyYXdlci5qcyIsIndlYnBhY2s6Ly9wU0VuZ2luZS8uL3NyYy9kcmF3ZXIvM0REcmF3ZXIuanMiLCJ3ZWJwYWNrOi8vcFNFbmdpbmUvLi9zcmMvZHJhd2VyL29iamVjdHMvUG9pbnQuanMiLCJ3ZWJwYWNrOi8vcFNFbmdpbmUvLi9zcmMvZHJhd2VyL29iamVjdHMvVHJpYW5nbGUuanMiLCJ3ZWJwYWNrOi8vcFNFbmdpbmUvLi9zcmMvYXBwLmpzIiwid2VicGFjazovL3BTRW5naW5lLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9wU0VuZ2luZS8uL3NyYy9jb3JlL21haW4uanMiLCJ3ZWJwYWNrOi8vcFNFbmdpbmUvLi9zcmMvY29yZS9pbml0LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiVmVjdG9yIiwieCIsInkiLCJ6IiwiY29sb3IiLCJ0aGlzIiwic2V0TmFtZSIsInVuZGVmaW5lZCIsInBTVGV4dCIsImVxdWFscyIsInNldCIsImFkZCIsInN1YiIsImlzRmluaXRlIiwiY29uc29sZSIsIndhcm4iLCJlcnJvciIsIm11bHQiLCJ2MSIsInYyIiwiY29weSIsImRpdiIsImRvdCIsInYiLCJ2TGVuIiwibWFnIiwibWluIiwibWF4IiwiTWF0aCIsInNxcnQiLCJub3JtYWxpemUiLCJhbmdsZSIsIm5ld0FuZ2xlIiwiZ2V0QW5nbGUiLCJtYWduaXR1ZGUiLCJjb3MiLCJzaW4iLCJhdGFuMiIsImNyb3NzIiwicm90YXRlIiwiaW5pdGlhbFBvcyIsImhlYWRTaXplIiwic3Ryb2tlV2VpZ2h0IiwiZHJhdyIsInBvaW50aW5nUG9zIiwic3Ryb2tlVyIsInBsb3R0ZXIiLCJfcFNpbXVsYXRpb25JbnN0YW5jZSIsInB1c2giLCJjb21wdXRlRm9yWFlaIiwidHJhbnNsYXRlIiwid2lkdGgiLCJoZWlnaHQiLCJ6elBvc2l0aW9uIiwiZW5kUG9zIiwiZHJhd2VyIiwic3Ryb2tlIiwiZmlsbCIsImxpbmUiLCJ0cmlhbmdsZSIsInBvcCIsIlBJIiwieE9mZnNldCIsImNXaWR0aCIsInlPZmZzZXQiLCJkZXNjIiwiYXNjIiwic2V0Q29sb3IiLCJzZXRQb3NpdGlvbiIsInNldE9mZnNldCIsImFycm93T3JQb3MiLCJjb21wdXRlRm9yWFkiLCJ0ZXh0IiwicG9zIiwidGV4dFNpemUiLCJzaG93SGl0Ym94Iiwid2luZG93IiwiTWF0aEpheCIsInNldFRleHQiLCJzdmdJbWciLCJpbWFnZSIsImgiLCJ3Iiwibm9GaWxsIiwic3ZnIiwidGV4MnN2ZyIsImRpc3BsYXkiLCJlbSIsImV4IiwiY29udGFpbmVyV2lkdGgiLCJsaW5lV2lkdGgiLCJzY2FsZSIsImlubmVySFRNTCIsInNwbGl0IiwicmVwbGFjZSIsInBhcnNlRmxvYXQiLCJleGVjIiwibG9hZEltYWdlIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiQmxvYiIsInR5cGUiLCJ0aW1lTGVuZ3RoIiwiZGF0YXMiLCJzY2FsZVRpbWUiLCJpc0FuaW1hdGluZyIsImluaXRpYWxUIiwibGFzdEtleSIsImdldEtleSIsInVwZGF0ZSIsIkRhdGUiLCJnZXRUaW1lIiwiZiIsImR0IiwiZmluYWxEcmF3Iiwic3VwZXIiLCJjdXJyZW50U2hhcGUiLCJuZXh0U2hhcGUiLCJsb2NhbER0IiwicG9pbnRzIiwiaiIsImxlbmd0aCIsInRoIiwiZHJhd0N1cnJlbnRTaGFwZSIsImx0IiwidGkiLCJwZXJjZW50IiwicGVyY2VudEZ1bmN0aW9uIiwibWF4SSIsInRpbWUiLCJhbmltYXRpb25OYW1lIiwic2ltdWxhdG9yIiwib2JqZWN0c0wiLCJwbENvbmYiLCJjb25maWciLCJlbmdpbmUiLCJiZyIsImJhY2tncm91bmRDb2xvciIsImJhY2tncm91bmQiLCJnIiwiYiIsImRpc3BsYXlHcmlkIiwiZ3JpZENvbG9yIiwiYSIsInlTIiwicm91bmQiLCJzcXVhcmVCeVgiLCJyZWN0Iiwib2Zmc2V0IiwieFJlbCIsInlSZWwiLCJ6UmVsIiwiYmVnaW5UaW1lIiwibm93IiwibGFzdFVwZGF0ZVRpbWUiLCJsYXN0RHJhd1RpbWUiLCJnZXREZWZhdWx0RW5naW5lQ29uZmlnIiwiY3VzdG9tIiwiZ2V0Q3VzdG9tQ29uZmlnIiwiZ2V0RW5naW5lQ29uZmlnIiwiZHRNb3kiLCJydW5uZXIiLCJyb2xsYmFja0NvbnRyb2wiLCJtaW5pbWFsVXBkYXRlRlBTIiwiZHRUb3RhbCIsImR0Q291bnQiLCJwcmVSdW5TaW11bGF0b3IiLCJjcmVhdGVQNUluc3RhbmNlIiwiaXNfM0QiLCJtb3VzZVBvcyIsImNvbXB1dGVGb3JYWUZyb21QaXhlbCIsIm1vdXNlWCIsIm1vdXNlWSIsInJ1blNpbXVsYXRvciIsImdldENhbnZhc1Byb3BvcnRpb25zIiwicHJvcG9ydGlvbnMiLCJjYW52YXMiLCJjcmVhdGVDYW52YXMiLCJXRUJHTCIsInBhcmVudCIsImRpdklkIiwicnUiLCJVUERBVEVfRlBTIiwiRFJBV19GUFMiLCJmcmFtZVJhdGUiLCJjdXJyZW50VGltZSIsImNyaXRpcUR0IiwibWF4U3RhbmRhcmREZXZpYXRpb24iLCJzaW11bGF0aW9uU3BlZWQiLCJhdmVyYWdlVGltZVNhbXBsZSIsIndpbmRvd1Jlc2l6ZWQiLCJyZXNpemVDYW52YXMiLCJtb3VzZURyYWdnZWQiLCJtb3ZhYmxlIiwiY1AiLCJpc1JlbGF0aXZlIiwid2luZG93V2lkdGgiLCJ3aW5kb3dIZWlnaHQiLCJjdXN0b21PYmplY3QiLCJudW1iZXIiLCJwYXJhbXMiLCJGdW5jdGlvbiIsImNvcHlQYXJhbXNUZW1wIiwiQXJyYXkiLCJhZGRpbmdPYmplY3RzQ29uZmlnS2V5V29yZHMiLCJydW5GdW5jdGlvbnMiLCJzbGljZSIsInJ1bkNsYXNzIiwiaXNfbW92YWJsZSIsImNvbmZpZ0Z1bmMiLCJwb2ludCIsIngwIiwieTAiLCJ4MSIsInkxIiwidjAiLCJyeCIsInJ5IiwiZWxsaXBzZSIsIndGIiwiaEYiLCJiZWdpblNoYXBlIiwidmVydGV4IiwiZW5kU2hhcGUiLCJDTE9TRSIsIlRZUEUiLCJub1N0cm9rZSIsInBvaW50TmFtZSIsInBvaW50U2l6ZSIsInZlY3Rvck5hbWUiLCJkcmF3T3JpZ2luVmVjdG9yIiwicG9pbnRTaXplRHJhd2luZyIsInRleHRQYWRkaW5nIiwicGFyc2VJbnQiLCJwMCIsInAxIiwicDIiLCJmaWxsQ29sb3IiLCJzdHJva2VDb2xvciIsInNldENvb3JkaW5hdGVzIiwicEciLCJnbG9iYWwiLCJwU1BvaW50IiwicFNUcmlhbmdsZSIsInBTQW5pbWF0aW9uIiwiZSIsInA1Iiwic2V0dXAiLCJpbnN0YW5jaWF0ZSIsInBTRW5naW5lIiwiZ2V0UFNFbmdpbmVWYXIiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImRvY3VtZW50IiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0aGVuIl0sIm1hcHBpbmdzIjoieUJBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBMERmLE9BckRBRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNB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QUFRLFdBQ2QzSyxPQUFPN0IscUJBQXVCLElBQUksSUFDbEM2QixPQUFPN0IscUJBQXFCeU0sY0FDNUI1SyxPQUFPNkssU0FBVzdLLE9BQU83QixxQkFBcUIyTSxvQkNScEIsSUFBSUMsUUFBUSxDQUFDQyxFQUFTQyxLQUNwQixZQUF4QkMsU0FBU0MsV0FDUkgsSUFFQWhMLE9BQU9vTCxpQkFBaUIsT0FBUUosR0FBUyxLQUc1QkssS0FYTyxLQUMzQixJQUFJIiwiZmlsZSI6InBTRW5naW5lLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gOSk7XG4iLCJpbXBvcnQgJy4vLi4vZHJhd2VyL29iamVjdHMvVGV4dCc7XHJcblxyXG4vKipcclxuKiBBIGNsYXNzIGZvciBldmVyeSAzRCBWZWN0b3JzLlxyXG4qIDxici8+UGxlYXNlIG5vdGUgdGhhdCBjdXJyZW50IHZlY3RvciBtYXkgb25seSBiZSB1c2VkIGluIDxiPjJEPC9iPi5cclxuKi9cclxuY2xhc3MgVmVjdG9yIHtcclxuICAgIC8qKlxyXG4gICAgKiBDcmVhdGVzIGEgbmV3IFZlY3RvciAoZWFjaCBjb29yZGluYXRlIGdldHMgYSAwIGlmIHZhbHVlIG5vdCBwcm92aWRlZClcclxuICAgICogQHBhcmFtIHggWCBjb29yZGluYXRlXHJcbiAgICAqIEBwYXJhbSB5IFkgY29vcmRpbmF0ZVxyXG4gICAgKiBAcGFyYW0gY29sb3IgQ29sb3Igb2YgdGhlIFZlY3RvciAncmdiYShSLCBHLCBCLCBBKSdcclxuICAgICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgVmVjdG9yIHRvIGJlIHBvdGVudGlhbGx5IGRpc3BsYXllZCAoQHNlZSBkcmF3IG1ldGhvZClcclxuICAgICogQHJldHVybiB0aGlzXHJcbiAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoeCwgeSwgeiwgY29sb3IgPSAncmdiKDI1NSwgMjU1LCAyNTUpJywgbmFtZSkge1xyXG4gICAgICAgIHRoaXMueCAgICA9IHggfHwgMDtcclxuICAgICAgICB0aGlzLnkgICAgPSB5IHx8IDA7XHJcbiAgICAgICAgdGhpcy56ICAgID0geiB8fCAwO1xyXG5cclxuICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0TmFtZShuYW1lKTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIC8qID09PT09PT09PSBCQVNJQyBWRUNUT1IgTUVUSE9EUyA9PT09PT09PT0gKi9cclxuICAgIC8qKlxyXG4gICAgKiBTZXQgeCwgeSwgeiBjb29yZGluYXRlcyAoZWFjaCBjb29yZGluYXRlIGdldHMgYSAwIGlmIHZhbHVlIG5vdCBwcm92aWRlZClcclxuICAgICogQHBhcmFtIHggTmV3IFggY29vcmRpbmF0ZSBPUiBhIFZlY3RvciB4IHRvIGJlIGVxdWFsIHRvXHJcbiAgICAqIEBwYXJhbSB5IE5ldyBZIGNvb3JkaW5hdGVcclxuICAgICogQHBhcmFtIHogTmV3IFogY29vcmRpbmF0ZVxyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgICBzZXQoeCwgeSwgeikge1xyXG4gICAgICAgIGlmKHggaW5zdGFuY2VvZiBWZWN0b3IpIHtcclxuICAgICAgICAgICAgdGhpcy54ID0geC54IHx8IDA7XHJcbiAgICAgICAgICAgIHRoaXMueSA9IHgueSB8fCAwO1xyXG4gICAgICAgICAgICB0aGlzLnogPSB4LnogfHwgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnggPSB4IHx8IDA7XHJcbiAgICAgICAgdGhpcy55ID0geCB8fCAwO1xyXG4gICAgICAgIHRoaXMueiA9IHggfHwgMDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogU2V0IHZlY3RvciBuYW1lXHJcbiAgICAqIEBwYXJhbSBuYW1lIE5ldyBuYW1lIG9mIHRoZSBWZWN0b3JcclxuICAgICogQHJldHVybiB0aGlzXHJcbiAgICAqL1xyXG4gICAgc2V0TmFtZShuYW1lKSB7XHJcbiAgICAgICAgaWYobmFtZSA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG5cclxuICAgICAgICBpZihuYW1lIGluc3RhbmNlb2YgcFNUZXh0KVxyXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gbmV3IHBTVGV4dChuYW1lLCBuZXcgVmVjdG9yKHRoaXMueCwgdGhpcy55LCB0aGlzLnopKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIENoZWNrIGlmIHR3byB2ZWN0b3JzIG9yIHBhaXIgb2YgY29vcmRpbmF0ZXMgYXJlIGVxdWFsXHJcbiAgICAqIEBwYXJhbSB4IFggY29vcmRpbmF0ZSBPUiBhIFZlY3RvciB4IGZvciBlZ2FsaXR5IGNoZWNraW5nXHJcbiAgICAqIEBwYXJhbSB5IFkgY29vcmRpbmF0ZVxyXG4gICAgKiBAcGFyYW0geiBaIGNvb3JkaW5hdGVcclxuICAgICogQHJldHVybiB0cnVlIGlmIGVxdWFsXHJcbiAgICAqL1xyXG4gICAgZXF1YWxzKHgsIHksIHopIHtcclxuICAgICAgICBpZih4IGluc3RhbmNlb2YgVmVjdG9yKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcXVhbHMoeC54LCB4LnksIHgueik7XHJcblxyXG4gICAgICAgIHJldHVybiAodGhpcy54ID09IHgpICYmICh0aGlzLnkgPT0geSkgJiYgKHRoaXMueiA9PSB6KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQHJldHVybiBhIGNvcHkgb2YgdGhlIGN1cnJlbnQgVmVjdG9yICovXHJcbiAgICBjb3B5KCkgeyByZXR1cm4gbmV3IFZlY3Rvcih0aGlzLngsIHRoaXMueSwgdGhpcy56KTsgfVxyXG5cclxuICAgIC8qKiBAcmV0dXJuIHRoaXMgVmVjdG9yIHdpdGggY29vcmRpbmF0ZXMgc2V0IHRvICgwLCAwLCAwKSAqL1xyXG4gICAgY2xlYXIoKSB7IHJldHVybiB0aGlzLnNldCgwLCAwLCAwKTsgfVxyXG5cclxuICAgIC8qKiBAcmV0dXJuIEEgU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvYmplY3QgKi9cclxuICAgIHRvU3RyaW5nKCkgeyByZXR1cm4gYFZlY3RvciBPYmplY3QgOiBbJHt0aGlzLnh9LCAke3RoaXMueX0sICR7dGhpcy56fV1gOyB9XHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgIC8qID09PT09PT09PSBCQVNJQyBWRUNUT1IgT1BFUkFUSU9OUyA9PT09PT09PT0gKi9cclxuICAgIC8qKlxyXG4gICAgKiBBZGQgdHdvIHZlY3RvcnMgb3IgcGFpciBvZiBjb29yZGluYXRlcyB0b2dldGhlclxyXG4gICAgKiBAcGFyYW0geCBYIGNvb3JkaW5hdGUgT1IgYSBWZWN0b3IgeFxyXG4gICAgKiBAcGFyYW0geSBZIGNvb3JkaW5hdGVcclxuICAgICogQHBhcmFtIHogWiBjb29yZGluYXRlXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIGFkZCh4LCB5LCB6KSB7XHJcbiAgICAgICAgaWYoeCBpbnN0YW5jZW9mIFZlY3RvcilcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkKHgueCwgeC55LCB4LnopO1xyXG5cclxuICAgICAgICB0aGlzLnggKz0geCB8fCAwO1xyXG4gICAgICAgIHRoaXMueSArPSB5IHx8IDA7XHJcbiAgICAgICAgdGhpcy56ICs9IHogfHwgMDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogU3VzdHJhY3QgdHdvIHZlY3RvcnMgb3IgcGFpciBvZiBjb29yZGluYXRlcyB0b2dldGhlclxyXG4gICAgKiBAcGFyYW0geCBYIGNvb3JkaW5hdGUgT1IgYSBWZWN0b3IgeFxyXG4gICAgKiBAcGFyYW0geSBZIGNvb3JkaW5hdGVcclxuICAgICogQHBhcmFtIHogWiBjb29yZGluYXRlXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIHN1Yih4LCB5LCB6KSB7XHJcbiAgICAgICAgaWYoeCBpbnN0YW5jZW9mIFZlY3RvcilcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3ViKHgueCwgeC55LCB4LnopO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5hZGQoLXgsIC15LCAteik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIE11bHRpcGx5IHRoaXMgVmVjdG9yIGJ5IGEgc2NhbGFyXHJcbiAgICAqIEBwYXJhbSBjIFRoZSBtdWx0aXBsaWNhdGlvbiBzY2FsYXJcclxuICAgICogQHJldHVybiB0aGlzXHJcbiAgICAqL1xyXG4gICAgbXVsdChjKSB7XHJcbiAgICAgICAgaWYoISh0eXBlb2YgYyA9PT0gJ251bWJlcicpIHx8ICFpc0Zpbml0ZShjKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgICAgICAgICAnVmVjdG9yOjptdWx0KCknLFxyXG4gICAgICAgICAgICAgICAgJ2MgaXMgdW5kZWZpbmVkIG9yIGlzblxcJ3QgYSBmaW5pdGUgbnVtYmVyJ1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMueCAqPSBjO1xyXG4gICAgICAgIHRoaXMueSAqPSBjO1xyXG4gICAgICAgIHRoaXMueiAqPSBjO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBEaXZpZGVzIHRoaXMgVmVjdG9yIGJ5IGEgc2NhbGFyXHJcbiAgICAqIEBwYXJhbSBjIFRoZSBkaXZpc2lvbiBzY2FsYXJcclxuICAgICogQHJldHVybiB0aGlzXHJcbiAgICAqL1xyXG4gICAgZGl2KGMpIHtcclxuICAgICAgICBpZighKHR5cGVvZiBjID09PSAnbnVtYmVyJykgfHwgIWlzRmluaXRlKGMpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgICAgICAgICdWZWN0b3I6OmRpdigpJyxcclxuICAgICAgICAgICAgICAgICdjIGlzIHVuZGVmaW5lZCBvciBpc25cXCd0IGEgZmluaXRlIG51bWJlcidcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGMgPT0gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdDYW5ub3QgZGl2aWRlIGJ5IDAnKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5tdWx0KDEgLyBjKTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIC8vIFN0YXRpYyBtZXRob2RzXHJcbiAgICAvKipcclxuICAgICogQWRkIHR3byB2ZWN0b3JzIHRvZ2V0aGVyXHJcbiAgICAqIEBwYXJhbSB2MSBUaGUgZmlyc3QgdmVjdG9yXHJcbiAgICAqIEBwYXJhbSB2MiBUaGUgc2Vjb25kIHZlY3RvclxyXG4gICAgKiBAcmV0dXJuIEEgbmV3IFZlY3RvclxyXG4gICAgKi9cclxuICAgIHN0YXRpYyBhZGQodjEsIHYyKSB7IHJldHVybiAodjEuY29weSgpKS5hZGQodjIpOyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFN1YnRyYWN0IHR3byB2ZWN0b3JzIHRvZ2V0aGVyXHJcbiAgICAqIEBwYXJhbSB2MSBUaGUgZmlyc3QgdmVjdG9yXHJcbiAgICAqIEBwYXJhbSB2MiBUaGUgc2Vjb25kIHZlY3RvclxyXG4gICAgKiBAcmV0dXJuIEEgbmV3IFZlY3RvclxyXG4gICAgKi9cclxuICAgIHN0YXRpYyBzdWIodjEsIHYyKSB7IHJldHVybiAodjEuY29weSgpKS5zdWIodjIpOyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIE11bHRpcGx5IGEgdmVjdG9yIGJ5IGEgc2NhbGFyXHJcbiAgICAqIEBwYXJhbSB2MSBUaGUgdmVjdG9yXHJcbiAgICAqIEBwYXJhbSBjIEEgc2NhbGFyIGNcclxuICAgICogQHJldHVybiBBIG5ldyBtdWx0aXBsaWVkIFZlY3RvclxyXG4gICAgKi9cclxuICAgIHN0YXRpYyBtdWx0KHYxLCBjKSB7IHJldHVybiAodjEuY29weSgpKS5tdWx0KGMpOyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIERpdmlkZXMgdHdvIHZlY3RvcnMgdG9nZXRoZXJcclxuICAgICogQHBhcmFtIHYxIFRoZSB2ZWN0b3JcclxuICAgICogQHBhcmFtIGMgQSBzY2FsYXIgY1xyXG4gICAgKiBAcmV0dXJuIEEgbmV3IGRpdmlkZWQgVmVjdG9yXHJcbiAgICAqL1xyXG4gICAgc3RhdGljIGRpdiAodjEsIGMpIHsgcmV0dXJuICh2MS5jb3B5KCkpLmRpdihjKTsgfVxyXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICAvKiA9PT09PT09PT0gQURWQU5DRUQgTUFUSCBWRUNUT1IgT1BFUkFUSU9OUyA9PT09PT09PT0gKi9cclxuICAgIC8vIERvdCBhbmQgY3Jvc3MgcHJvZHVjdHNcclxuICAgIC8qKlxyXG4gICAgKiBEb3QgcHJvZHVjdCBiZXR3ZWVuIGEgVmVjdG9yIE9SIGEgcGFpciBvZiBjb29yZGluYXRlc1xyXG4gICAgKiBAcGFyYW0geCBYIGNvb3JkaW5hdGUgT1IgYSBWZWN0b3IgeFxyXG4gICAgKiBAcGFyYW0geSBZIGNvb3JkaW5hdGVcclxuICAgICogQHBhcmFtIHogWiBjb29yZGluYXRlXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIGRvdCh4LCB5LCB6KSB7XHJcbiAgICAgICAgaWYoeCBpbnN0YW5jZW9mIFZlY3RvcilcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG90KHgueCwgeC55LCB4LnopO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy54ICogKHggfHwgMCkgKyB0aGlzLnkgKiAoeSB8fCAwKSArIHRoaXMueiAqICh6IHx8IDApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBDcm9zcyBwcm9kdWN0IHdpdGggYSBWZWN0b3JcclxuICAgICogQHBhcmFtIHYgVGhlIHZlY3RvclxyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgICBjcm9zcyh2KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IoXHJcbiAgICAgICAgICAgIHRoaXMueSAqIHYueiAtIHRoaXMueiAqIHYueSxcclxuICAgICAgICAgICAgdGhpcy56ICogdi54IC0gdGhpcy54ICogdi56LFxyXG4gICAgICAgICAgICB0aGlzLnggKiB2LnkgLSB0aGlzLnkgKiB2LnhcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLy8gTWFnbml0dWRlXHJcbiAgICAvKiogQHJldHVybiB0aGUgbm9ybWFsaXplZCBWZWN0b3IgKi9cclxuICAgIG5vcm1hbGl6ZSgpIHtcclxuICAgICAgICBjb25zdCB2TGVuID0gdGhpcy5tYWcoKTtcclxuICAgICAgICBpZiAodkxlbiAhPT0gMClcclxuICAgICAgICAgICAgdGhpcy5kaXYodkxlbik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBMaW1pdCB0aGUgbWFnbml0dWRlIG9mIHRoZSB2ZWN0b3IgYmV0d2VlbiBhIG1pbiBhbmQgYSBtYXggdmFsdWVcclxuICAgICogQHBhcmFtIG1pbiBNaW5pbXVtIHZhbHVlIG9mIHRoZSBWZWN0b3IgbWFnbml0dWRlXHJcbiAgICAqIEBwYXJhbSBtYXggTWF4aW11bSB2YWx1ZSBvZiB0aGUgVmVjdG9yIG1hZ25pdHVkZVxyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgICBsaW1pdChtaW4sIG1heCkge1xyXG4gICAgXHRsZXQgbSA9IHRoaXMubWFnKCk7XHJcbiAgICBcdGlmKG0gPCBtaW4pXHJcbiAgICBcdFx0dGhpcy5kaXYobSkubXVsdChtaW4pO1xyXG4gICAgXHRpZihtID4gbWF4KVxyXG4gICAgXHRcdHRoaXMuZGl2KG0pLm11bHQobWF4KTtcclxuICAgIFx0cmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEByZXR1cm4gdGhlIG1hZ25pdHVkZSBvZiB0aGlzIHZlY3RvciAqL1xyXG4gICAgbWFnKCkgeyByZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueik7IH1cclxuXHJcbiAgICAvKipcclxuICAgICogU2V0IHRoZSBtYWduaXR1ZGUgb2YgdGhpcyB2ZWN0b3JcclxuICAgICogQHBhcmFtIG1hZyBUaGUgbmV3IG1hZ25pdHVkZVxyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgICBzZXRNYWcobWFnKSB7IHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHQobWFnKTsgfVxyXG5cclxuXHJcblxyXG4gICAgLy8gQW5nbGVzXHJcbiAgICAvKipcclxuICAgICogUm90YXRlIHRoaXMgdmVjdG9yIGJ5IGFuIGFuZ2xlIG9uIHRoZSBYWSBwbGFuZVxyXG4gICAgKiBAcGFyYW0gYW5nbGUgQW4gYW5nbGUgSU4gUkFESUFOU1xyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgICByb3RhdGUoYW5nbGUpIHtcclxuICAgICAgICBjb25zdCBuZXdBbmdsZSAgPSB0aGlzLmdldEFuZ2xlKCkgKyBhbmdsZTtcclxuICAgICAgICBjb25zdCBtYWduaXR1ZGUgPSB0aGlzLm1hZygpO1xyXG5cclxuICAgICAgICB0aGlzLnggPSBNYXRoLmNvcyhuZXdBbmdsZSkgKiBtYWduaXR1ZGU7XHJcbiAgICAgICAgdGhpcy55ID0gTWF0aC5zaW4obmV3QW5nbGUpICogbWFnbml0dWRlO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKiogQHJldHVybiB0aGUgYW5nbGUgYmV0d2VlbiB0aGlzIHZlY3RvciBhbmQgdGhlIG9yaWdpbiAqL1xyXG4gICAgZ2V0QW5nbGUoKSB7IHJldHVybiBNYXRoLmF0YW4yKHRoaXMueSwgdGhpcy54KTsgfVxyXG5cclxuXHJcblxyXG4gICAgLy8gU3RhdGljIG1ldGhvZHNcclxuICAgIC8qKlxyXG4gICAgKiBEaXN0YW5jZSBiZXd0ZWVuIHR3byB2ZWN0b3JzXHJcbiAgICAqIEBwYXJhbSB2MSBUaGUgZmlyc3QgdmVjdG9yXHJcbiAgICAqIEBwYXJhbSB2MiBUaGUgc2Vjb25kIHZlY3RvclxyXG4gICAgKiBAcmV0dXJuIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSB0d28gcG9zaXRpb25zIHdoZXJlIHRoZSBhcnJvdyBhcmUgcG9pbnRpbmcgdG9cclxuICAgICovXHJcbiAgICBzdGF0aWMgZGlzdCh2MSwgdjIpIHsgcmV0dXJuIFZlY3Rvci5zdWIodjEsIHYyKS5tYWcoKTsgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBEb3QgcHJvZHVjdCBiZXR3ZWVuIGEgVmVjdG9yIE9SIGEgcGFpciBvZiBjb29yZGluYXRlc1xyXG4gICAgKiBAcGFyYW0gdjEgVGhlIGZpcnN0IHZlY3RvclxyXG4gICAgKiBAcGFyYW0geCBYIGNvb3JkaW5hdGUgT1IgYSBWZWN0b3IgeFxyXG4gICAgKiBAcGFyYW0geSBZIGNvb3JkaW5hdGVcclxuICAgICogQHBhcmFtIHogWiBjb29yZGluYXRlXHJcbiAgICAqIEByZXR1cm4gdGhlIGRvdHRlZCBuZXcgdmVjdG9yXHJcbiAgICAqL1xyXG4gICAgc3RhdGljIGRvdCh2MSwgeCwgeSwgeikgeyByZXR1cm4gKHYxLmNvcHkoKSkuZG90KHgsIHksIHopOyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIENyb3NzIHByb2R1Y3Qgd2l0aCBhIFZlY3RvclxyXG4gICAgKiBAcGFyYW0gdjEgVGhlIGZpcnN0IHZlY3RvclxyXG4gICAgKiBAcGFyYW0gdjIgVGhlIHNlY29uZCB2ZWN0b3JcclxuICAgICogQHJldHVybiB0aGUgY3Jvc3NlZCBuZXcgdmVjdG9yXHJcbiAgICAqL1xyXG4gICAgc3RhdGljIGNyb3NzKHYxLCB2MikgeyByZXR1cm4gKHYxLmNvcHkoKSkuY3Jvc3ModjIpOyB9XHJcblxyXG4gICAgLyoqIEByZXR1cm4gdGhlIG5vcm1hbGl6ZWQgVmVjdG9yICovXHJcbiAgICBzdGF0aWMgbm9ybWFsaXplKHYxKSB7IHJldHVybiAodjEuY29weSgpKS5ub3JtYWxpemUoKTsgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBSb3RhdGUgYSB2ZWN0b3IgYnkgYW4gYW5nbGVcclxuICAgICogQHBhcmFtIHYxIFRoZSB2ZWN0b3IgdG8gYmUgcm90YXRlZFxyXG4gICAgKiBAcGFyYW0gYW5nbGUgQW4gYW5nbGUgSU4gUkFESUFOU1xyXG4gICAgKiBAcmV0dXJuIHRoZSByb3RhdGVkIHZlY3RvclxyXG4gICAgKi9cclxuICAgIHN0YXRpYyByb3RhdGUgKHYxLCBhbmdsZSkgeyByZXR1cm4gKHYxLmNvcHkoKSkucm90YXRlKGFuZ2xlKTsgfVxyXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgIC8qID09PT09PT09PSBEUkFXSU5HIFZFQ1RPUlMgPT09PT09PT09ICovXHJcbiAgICAvKipcclxuICAgICogRHJhdyBhIHZlY3RvciB0byB0aGUgY2FudmFzIHVzaW5nIHRoZSBgRHJhd2VyYCBjbGFzc1xyXG4gICAgKiBAcGFyYW0gaW5pdGlhbFBvcyBUaGUgYmVnaW5uaW5nIHBvc2l0aW9uIG9mIHRoZSBWZWN0b3IgQXJyb3dcclxuICAgICogQHBhcmFtIGhlYWRTaXplIFNpemUgb2YgdGhlIGhlYWQgaW4gcGl4ZWxzIChkZWZhdWx0ID0gNSBweClcclxuICAgICogQHBhcmFtIHN0cm9rZVdlaWdodCBTdHJva2Ugd2VpZ2h0IG9mIHRoZSBWZWN0b3IgaW4gcGl4ZWxzIChkZWZhdWx0ID0gMSBweClcclxuICAgICovXHJcbiAgICBkcmF3KGluaXRpYWxQb3MsIGhlYWRTaXplLCBzdHJva2VXZWlnaHQpIHtcclxuICAgICAgICBpZihpbml0aWFsUG9zICE9IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgVmVjdG9yLmRyYXcoaW5pdGlhbFBvcywgdGhpcywgdGhpcy5jb2xvciwgaGVhZFNpemUsIHN0cm9rZVdlaWdodCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBWZWN0b3IuZHJhdyh1bmRlZmluZWQgLCB0aGlzLCB0aGlzLmNvbG9yKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogKFBsZWFzZSBhdm9pZCBkaXJlY3RseSB1c2luZyB0aGlzIG1ldGhvZClcclxuICAgICogRHJhdyBhIHZlY3RvciB0byB0aGUgY2FudmFzIHVzaW5nIHRoZSBgRHJhd2VyYCBjbGFzc1xyXG4gICAgKiBAcGFyYW0gaW5pdGlhbFBvcyBUaGUgYmVnaW5uaW5nIHBvc2l0aW9uIG9mIHRoZSBWZWN0b3IgQXJyb3dcclxuICAgICogQHBhcmFtIGluaXRpYWxQb3MgVGhlIGVuZGluZyBwb3NpdGlvbiBvZiB0aGUgVmVjdG9yIEFycm93XHJcbiAgICAqIEBwYXJhbSBjb2xvciBDb2xvciBvZiB0aGUgYXJyb3cgKGRlZmF1bHQgYHJnYigyNTUsIDI1NSwgMjU1KWApXHJcbiAgICAqIEBwYXJhbSBoZWFkU2l6ZSBTaXplIG9mIHRoZSBoZWFkIGluIHBpeGVscyAoZGVmYXVsdCA9IDUgcHgpXHJcbiAgICAqIEBwYXJhbSBzdHJva2VXZWlnaHQgU3Ryb2tlIHdlaWdodCBvZiB0aGUgVmVjdG9yIGluIHBpeGVscyAoZGVmYXVsdCA9IDEgcHgpXHJcbiAgICAqL1xyXG4gICAgc3RhdGljIGRyYXcoaW5pdGlhbFBvcywgcG9pbnRpbmdQb3MsIGNvbG9yID0gJ3JnYigyNTUsIDI1NSwgMjU1KScsIGhlYWRTaXplID0gNSwgc3Ryb2tlVyA9IDEpIHtcclxuICAgICAgICBpZigoaW5pdGlhbFBvcyAhPSB1bmRlZmluZWQgJiYgaW5pdGlhbFBvcy56ICE9IDApIHx8IHBvaW50aW5nUG9zLnogIT0gMClcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVmVjdG9yIGRyYXdpbmcgaXMgb25seSBpbXBsZW1lbnRlZCBpbiAyRCB5ZXQuXCIpO1xyXG5cclxuICAgICAgICBsZXQgcGxvdHRlciA9IF9wU2ltdWxhdGlvbkluc3RhbmNlLnBsb3R0ZXI7XHJcblxyXG4gICAgICAgIHB1c2goKTtcclxuICAgICAgICAgICAgLy8gRFJBVyBWRUNUT1JcclxuICAgICAgICAgICAgaWYoaW5pdGlhbFBvcyAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBwID0gcGxvdHRlci5jb21wdXRlRm9yWFlaKGluaXRpYWxQb3MueCwgaW5pdGlhbFBvcy55LCBpbml0aWFsUG9zLnopO1xyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlKHAueCAtIHdpZHRoIC8gMiwgcC55IC0gaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCB6elBvc2l0aW9uID0gcGxvdHRlci5jb21wdXRlRm9yWFlaKDAsIDAsIDApO1xyXG4gICAgICAgICAgICBsZXQgZW5kUG9zICAgICA9IHBsb3R0ZXIuY29tcHV0ZUZvclhZWihwb2ludGluZ1Bvcy54LCBwb2ludGluZ1Bvcy55LCBwb2ludGluZ1Bvcy56KTtcclxuXHJcbiAgICAgICAgICAgIHB1c2goKTtcclxuICAgICAgICAgICAgICAgIHBsb3R0ZXIuZHJhd2VyXHJcbiAgICAgICAgICAgICAgICAgICAgLnN0cm9rZShjb2xvcilcclxuICAgICAgICAgICAgICAgICAgICAuc3Ryb2tlV2VpZ2h0KHN0cm9rZVcpXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbGwoY29sb3IpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxpbmUoenpQb3NpdGlvbi54LCB6elBvc2l0aW9uLnksIGVuZFBvcy54LCBlbmRQb3MueSk7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGUoZW5kUG9zLngsIGVuZFBvcy55KTtcclxuXHJcbiAgICAgICAgICAgICAgICByb3RhdGUoZW5kUG9zLnN1Yih6elBvc2l0aW9uKS5nZXRBbmdsZSgpKTtcclxuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZSgtaGVhZFNpemUgLSAyLCAwKTtcclxuICAgICAgICAgICAgICAgIHRyaWFuZ2xlKDAsIGhlYWRTaXplIC8gMiwgMCwgLWhlYWRTaXplIC8gMiwgaGVhZFNpemUsIDApO1xyXG4gICAgICAgIFx0cG9wKCk7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gRFJBVyBWRUNUT1IgTkFNRVxyXG4gICAgICAgICAgICBpZihwb2ludGluZ1Bvcy5uYW1lICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gT2Zmc2V0IG9mIHRoZSB0ZXh0IGJhc2VkIG9uIHRoZSBhbmdsZSBvbiB0aGUgdW5pdCBjaXJjbGVcclxuICAgICAgICAgICAgICAgIGxldCBhbmdsZSA9IHBvaW50aW5nUG9zLmdldEFuZ2xlKCk7XHJcbiAgICAgICAgICAgICAgICBpZihhbmdsZSA8IDApXHJcbiAgICAgICAgICAgICAgICAgICAgYW5nbGUgKz0gMipQSTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgeE9mZnNldCA9IDAuOCAqIHBvaW50aW5nUG9zLm5hbWUuY1dpZHRoO1xyXG4gICAgICAgICAgICAgICAgaWYoICAgIChQSS80ICAgPCBhbmdsZSAmJiBhbmdsZSA8PSBQSS8yICApXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgKDMqUEkvNCA8IGFuZ2xlICYmIGFuZ2xlIDw9IDUqUEkvNClcclxuICAgICAgICAgICAgICAgICAgICB8fCAoMypQSS8yIDwgYW5nbGUgJiYgYW5nbGUgPD0gNypQSS80KVxyXG4gICAgICAgICAgICAgICAgKSB4T2Zmc2V0ICo9IC0xO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCB5T2Zmc2V0ID0gLTEuMSAqIHBvaW50aW5nUG9zLm5hbWUuZGVzYyArIDEuMSAqIHBvaW50aW5nUG9zLm5hbWUuYXNjO1xyXG4gICAgICAgICAgICAgICAgaWYoICAgIChQSS80ICAgPCBhbmdsZSAmJiBhbmdsZSA8PSAgIFBJLzIpXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgKFBJLzIgICA8IGFuZ2xlICYmIGFuZ2xlIDw9IDMqUEkvNClcclxuICAgICAgICAgICAgICAgICAgICB8fCAoUEkgICAgIDwgYW5nbGUgJiYgYW5nbGUgPD0gNSpQSS80KVxyXG4gICAgICAgICAgICAgICAgICAgIHx8ICg3KlBJLzQgPCBhbmdsZSAmJiBhbmdsZSA8PSAgIDIqUEkpXHJcbiAgICAgICAgICAgICAgICApIHlPZmZzZXQgKj0gLTE7XHJcblxyXG4gICAgICAgICAgICAgICAgcG9pbnRpbmdQb3MubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRDb2xvcihjb2xvcilcclxuICAgICAgICAgICAgICAgICAgICAuc2V0UG9zaXRpb24ocG9pbnRpbmdQb3MueCAvIDIsIHBvaW50aW5nUG9zLnkgLyAyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRPZmZzZXQoeE9mZnNldCwgeU9mZnNldClcclxuICAgICAgICAgICAgICAgICAgICAuZHJhdyhwbG90dGVyLmRyYXdlcik7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIC8vIEFSUk9XIE9OIFRPUFxyXG4gICAgICAgICAgICAgICAgbGV0IGFycm93T3JQb3MgPSBwbG90dGVyLmNvbXB1dGVGb3JYWShwb2ludGluZ1Bvcy54IC8gMiwgcG9pbnRpbmdQb3MueSAvIDIpO1xyXG4gICAgICAgICAgICAgICAgcGxvdHRlci5kcmF3ZXJcclxuICAgICAgICAgICAgICAgICAgICAuc3Ryb2tlKGNvbG9yKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHJva2VXZWlnaHQoc3Ryb2tlVylcclxuICAgICAgICAgICAgICAgICAgICAuZmlsbChjb2xvcik7XHJcblxyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlKFxyXG4gICAgICAgICAgICAgICAgICAgIGFycm93T3JQb3MueCArIHhPZmZzZXQgLSBwb2ludGluZ1Bvcy5uYW1lLmNXaWR0aCAvIDIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dPclBvcy55ICsgeU9mZnNldCAtIHBvaW50aW5nUG9zLm5hbWUuYXNjXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgbGluZSgwLCAwLCBwb2ludGluZ1Bvcy5uYW1lLmNXaWR0aCwgMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVHJpYW5nbGVcclxuICAgICAgICAgICAgICAgIHB1c2goKTtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGUoaGVhZFNpemUgKyBwb2ludGluZ1Bvcy5uYW1lLmNXaWR0aCAvIDEuNSwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJpYW5nbGUoMCwgaGVhZFNpemUgLyA0LCAwLCAtaGVhZFNpemUgLyA0LCBoZWFkU2l6ZSAvIDIsIDApO1xyXG4gICAgICAgICAgICAgICAgcG9wKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBwb3AoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBWZWN0b3I7XHJcbiIsImNsYXNzIHBTVGV4dCB7XHJcbiAgICAvKipcclxuICAgICogQHBhcmFtIHRleHQgTGFUZVggY29kZSAoaW5zZXJ0ICdcXHRleHR7VEVYVH0nIGZvciBwbGFpbiB0ZXh0KVxyXG4gICAgKiBAcGFyYW0gcG9zIHRleHQgcG9zaXRpb24gKGRlZmF1bHQgKDAsIDApKVxyXG4gICAgKiBAcGFyYW0gdGV4dFNpemUgdGV4dCBzaXplIG11bHRpcGxpZXIgKGRlZmF1bHQgMSlcclxuICAgICogQHBhcmFtIGNvbG9yIHRleHQgY29sb3IgKGRlZmF1bHQgd2hpdGUpXHJcbiAgICAqIEBwYXJhbSBzaG93SGl0Ym94IHRydWUgOiBzaG93IHRleHQgaGl0Ym94IChkZWZhdWx0IDogZmFsc2UpXHJcbiAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGV4dCwgcG9zID0gbmV3IFZlY3RvcigpLCB0ZXh0U2l6ZSA9IDEsIGNvbG9yID0gXCIjRkZGRkZGXCIsIHNob3dIaXRib3ggPSBmYWxzZSkge1xyXG4gICAgICAgIGlmKHdpbmRvdy5NYXRoSmF4ID09IHVuZGVmaW5lZClcclxuXHRcdFx0Y29uc29sZS5lcnJvcignWW91IG11c3QgaW1wb3J0IE1hdGhKYXguanMgPj0zLjAuMCBpbiBvcmRlciB0byB1c2UgVGV4dCBhbmQgVGV4IHN0cmluZ3MuJyk7XHJcblxyXG4gICAgICAgIHRoaXMudGV4dFNpemUgICA9IHRleHRTaXplO1xyXG4gICAgICAgIHRoaXMuY29sb3IgICAgICA9IGNvbG9yO1xyXG4gICAgICAgIHRoaXMucG9zICAgICAgICA9IHBvcztcclxuICAgICAgICB0aGlzLnNob3dIaXRib3ggPSBzaG93SGl0Ym94O1xyXG5cclxuICAgICAgICB0aGlzLnNldFRleHQodGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIERyYXcgdGhlIHRleHQgdG8gdGhlIHNjcmVlblxyXG4gICAgKi9cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgbGV0IGRyYXdlciA9IF9wU2ltdWxhdGlvbkluc3RhbmNlLnBsb3R0ZXIuZHJhd2VyO1xyXG4gICAgICAgIGxldCBwb3MgICAgPSBkcmF3ZXIucGxvdHRlci5jb21wdXRlRm9yWFlaKHRoaXMucG9zLngsIHRoaXMucG9zLnkpO1xyXG5cclxuICAgICAgICBwdXNoKCk7XHJcbiAgICAgICAgICAgIHRyYW5zbGF0ZSgtdGhpcy5zdmdJbWcud2lkdGggLyAyLCAtdGhpcy5zdmdJbWcuaGVpZ2h0IC8gMik7XHJcblxyXG4gICAgICAgICAgICBpbWFnZSh0aGlzLnN2Z0ltZywgcG9zLngsIHBvcy55LCB0aGlzLnN2Z0ltZy53aWR0aCwgdGhpcy5zdmdJbWcuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgIGlmKHRoaXMuc2hvd0hpdGJveCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGggPSB0aGlzLnN2Z0ltZy5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgdyA9IHRoaXMuc3ZnSW1nLndpZHRoO1xyXG5cclxuICAgICAgICAgICAgICAgIGRyYXdlclxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHJva2UodGhpcy5jb2xvcilcclxuICAgICAgICAgICAgICAgICAgICAuc3Ryb2tlV2VpZ2h0KDEpXHJcbiAgICAgICAgICAgICAgICAgICAgLm5vRmlsbCgpO1xyXG4gICAgICAgICAgICAgICAgbGluZShwb3MueCAgICAsIHBvcy55ICAgICwgcG9zLnggKyB3LCBwb3MueSAgICApO1xyXG4gICAgICAgICAgICAgICAgbGluZShwb3MueCAgICAsIHBvcy55ICsgaCwgcG9zLnggKyB3LCBwb3MueSArIGgpO1xyXG4gICAgICAgICAgICAgICAgbGluZShwb3MueCAgICAsIHBvcy55ICsgaCwgcG9zLnggICAgLCBwb3MueSAgICApO1xyXG4gICAgICAgICAgICAgICAgbGluZShwb3MueCArIHcsIHBvcy55ICsgaCwgcG9zLnggKyB3LCBwb3MueSAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgcG9wKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIENoYW5nZSB0ZXh0IHZhbHVlXHJcbiAgICAqL1xyXG4gICAgc2V0VGV4dCh0ZXh0KSB7XHJcbiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcclxuXHJcbiAgICAgICAgbGV0IHN2ZyA9ICc8c3ZnJyArIE1hdGhKYXgudGV4MnN2Zyh0aGlzLnRleHQsXHJcbiAgICAgICAgICAgIHsgZGlzcGxheSA6IHRydWUsIGVtIDogMTIsIGV4IDogNiwgY29udGFpbmVyV2lkdGggOiA4MCAqIDYsIGxpbmVXaWR0aCA6IDEwMDAwMCwgc2NhbGUgOiAxIH1cclxuICAgICAgICApLmlubmVySFRNTC5zcGxpdCgnPHN2ZycpWzFdLnNwbGl0KCc8L3N2Zz4nKVswXSArICc8L3N2Zz4nO1xyXG5cclxuICAgICAgICBzdmcgPSBzdmdcclxuICAgICAgICAgICAgLnJlcGxhY2UoLzxnL2cgICAgICAgICAgICwgJzxnIGNvbG9yPVwiJyArIHRoaXMuY29sb3IgKyAnXCInKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvd2lkdGg9XCIoLio/KVwiLyAsICd3aWR0aD1cIicgICsgcGFyc2VGbG9hdCgvd2lkdGg9XCIoLio/KVwiLyAuZXhlYyhzdmcpWzFdLnNwbGl0KCdleCcpWzBdKSAqIHRoaXMudGV4dFNpemUgKyAnZXhcIicpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC9oZWlnaHQ9XCIoLio/KVwiLywgJ2hlaWdodD1cIicgKyBwYXJzZUZsb2F0KC9oZWlnaHQ9XCIoLio/KVwiLy5leGVjKHN2ZylbMV0uc3BsaXQoJ2V4JylbMF0pICogdGhpcy50ZXh0U2l6ZSArICdleFwiJyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3ZnSW1nID0gbG9hZEltYWdlKFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoW3N2Z10sIHsgdHlwZTogJ2ltYWdlL3N2Zyt4bWwnIH0pKSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBDaGFuZ2VzIHRleHQgcG9zaXRpb25cclxuICAgICogQHBhcmFtIHggbmV3IFggcG9zaXRpb25cclxuICAgICogQHBhcmFtIHkgbmV3IFkgcG9zaXRpb25cclxuICAgICovXHJcbiAgICBzZXRQb3NpdGlvbih4LCB5KSB7XHJcbiAgICAgICAgdGhpcy5wb3MueCA9IHg7XHJcbiAgICAgICAgdGhpcy5wb3MueSA9IHk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIENoYW5nZXMgdGV4dCBjb2xvclxyXG4gICAgKiBAcGFyYW0gY29sb3IgTmV3IGNvbG9yXHJcbiAgICAqL1xyXG4gICAgc2V0Q29sb3IoY29sb3IpIHtcclxuICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHBTVGV4dDtcclxuIiwiY2xhc3MgcFNBbmltYXRpb25IYW5kbGVyIHtcclxuICAgIC8qKlxyXG4gICAgKiBDcmVhdGVzIGEgbmV3IGFic3RyYWN0IGFuaW1hdGlvblxyXG4gICAgKiBAcGFyYW0gdGltZUxlbmd0aCBMZW5ndGggb2YgdGhlIGFuaW1hdGlvbiBpbiBzZWNvbmRzXHJcbiAgICAqIEBwYXJhbSBkYXRhcyBDdXN0b20gYW5pbWF0aW9uIGRhdGFzXHJcbiAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGltZUxlbmd0aCwgZGF0YXMpIHtcclxuICAgICAgICB0aGlzLnNjYWxlVGltZSAgID0gMTtcclxuICAgICAgICB0aGlzLmlzQW5pbWF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsVCAgICA9IDA7XHJcbiAgICAgICAgdGhpcy5kYXRhcyAgICAgICA9IGRhdGFzO1xyXG4gICAgICAgIHRoaXMudGltZUxlbmd0aCAgPSB0aW1lTGVuZ3RoO1xyXG4gICAgICAgIHRoaXMubGFzdEtleSAgICAgPSB0aGlzLmdldEtleSh0aGlzLnVwZGF0ZSkgLyB0aGlzLnNjYWxlVGltZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogU3RhcnQgKG9yIHJlc3RhcnQpIHRoZSBjdXJyZW50IGFuaW1hdGlvbiAqL1xyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgdGhpcy5pc0FuaW1hdGluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsVCAgICA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLyAxMDAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBTdG9wIHRoZSBjdXJyZW50IGFuaW1hdGlvbiAqL1xyXG4gICAgc3RvcCgpIHtcclxuICAgICAgICB0aGlzLmlzQW5pbWF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsVCAgICA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEBwYXJhbSBmIEN1cnJlbnQgZHJhd2luZyBhbmltYXRpb24gZnVuY3Rpb25cclxuICAgICogQHJldHVybiBmKGR0KVxyXG4gICAgKi9cclxuICAgIGdldEtleShmKSB7XHJcbiAgICAgICAgbGV0IGR0ID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAvIDEwMDAgLSB0aGlzLmluaXRpYWxUO1xyXG5cclxuICAgICAgICBpZihkdCA+IHRoaXMudGltZUxlbmd0aClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxEcmF3KHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLmxhc3RLZXkgPSBmKGR0LCB0aGlzKSAvIHRoaXMuc2NhbGVUaW1lO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5sYXN0S2V5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAcmV0dXJuIHRoZSBjdXJyZW50IHVwZGF0ZSBrZXkgKi9cclxuICAgIHVwZGF0ZUtleSgpIHsgcmV0dXJuIHRoaXMuZ2V0S2V5KHRoaXMudXBkYXRlKTsgfVxyXG4gICAgLyoqIEByZXR1cm4gdGhlIGN1cnJlbnQgZHJhdyBrZXkgKi9cclxuICAgIGRyYXdLZXkgICgpIHsgcmV0dXJuIHRoaXMuZ2V0S2V5KHRoaXMuZHJhdyAgKTsgfVxyXG5cclxuICAgIC8qKiBVcGRhdGUgbG9vcCBmb3Igb3ZlcndyaXRpbmcgKi9cclxuICAgIHVwZGF0ZSgpIHt9XHJcbiAgICAvKiogRHJhdyBsb29wIGZvciBvdmVyd3JpdGluZyAqL1xyXG4gICAgZHJhdyAgKCkge31cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgcFNBbmltYXRpb25IYW5kbGVyO1xyXG4iLCJpbXBvcnQgcFNBbmltYXRpb25IYW5kbGVyIGZyb20gJy4vcFNBbmltYXRpb25IYW5kbGVyJztcclxuXHJcbmNsYXNzIHBTSW50ZXJwb2xhdGlvbiBleHRlbmRzIHBTQW5pbWF0aW9uSGFuZGxlciB7XHJcbiAgICAvKipcclxuICAgICogSW50ZXJwb2xhdGlvbiBhbmltYXRpb25cclxuICAgICogQHBhcmFtIHRpbWVMZW5ndGggRHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvbiBpbiBzZWNvbmRzXHJcbiAgICAqIEBwYXJhbSBkYXRhcyBUaGUgZGF0YXMgdG8gYmUgaW50ZXJwb2xhdGVkICdbUG9pbnQxLCBQb2ludDIsIC4uLl0nXHJcbiAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGltZUxlbmd0aCwgZGF0YXMpIHtcclxuICAgICAgICBzdXBlcih0aW1lTGVuZ3RoLCBkYXRhcyk7XHJcblxyXG4gICAgICAgIHRoaXMuaSA9IC0xO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFNoYXBlID0gdGhpcy5uZXh0U2hhcGUoZGF0YXMpO1xyXG5cclxuICAgICAgICB0aGlzLmxvY2FsRHQgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBTZXQgc2hhcGUgYmFzZWQgb24gYW5pbWF0aW9uIGFuZCBwb2ludHMgKi9cclxuICAgIG5leHRTaGFwZShwb2ludHMpIHtcclxuICAgICAgICB0aGlzLmkrKztcclxuXHJcbiAgICAgICAgbGV0IGogPSB0aGlzLmkgKyAxO1xyXG4gICAgICAgIGlmKGogPiBwb2ludHMubGVuZ3RoIC0gMSlcclxuICAgICAgICAgICAgaiA9IDA7XHJcblxyXG4gICAgICAgIHJldHVybiBbcG9pbnRzW3RoaXMuaV0sIHBvaW50c1tqXV07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEBwYXJhbSB0aW1lIEN1cnJlbnQgdGltZSBvZiB0aGUgYW5pbWF0aW9uXHJcbiAgICAqIEBwYXJhbSB0aCBjdXJyZW50IHBTRWFzZUluT3V0Q3ViaWMgaW5zdGFuY2VcclxuICAgICogQHJldHVybiB0aGUgY29ycmVzcG9uZGluZyB1cGRhdGUga2V5XHJcbiAgICAqL1xyXG4gICAgdXBkYXRlKGR0LCB0aCkgeyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEBwYXJhbSB0aW1lIEN1cnJlbnQgdGltZSBvZiB0aGUgYW5pbWF0aW9uXHJcbiAgICAqIEBwYXJhbSB0aCBjdXJyZW50IHBTRWFzZUluT3V0Q3ViaWMgaW5zdGFuY2VcclxuICAgICogQHJldHVybiB0aGUgY29ycmVzcG9uZGluZyBkcmF3IGtleVxyXG4gICAgKi9cclxuICAgIGRyYXcoZHQsIHRoKSB7XHJcbiAgICAgICAgbGV0IGMgPSB0aC50aW1lTGVuZ3RoIC8gdGguZGF0YXMubGVuZ3RoO1xyXG4gICAgICAgIGlmKCEodGguY3VycmVudFNoYXBlWzBdID09IHVuZGVmaW5lZCB8fCB0aC5jdXJyZW50U2hhcGVbMV0gPT0gdW5kZWZpbmVkKSkge1xyXG4gICAgICAgICAgICBpZihkdCAtIHRoLmxvY2FsRHQgPj0gYykge1xyXG4gICAgICAgICAgICAgICAgdGguY3VycmVudFNoYXBlID0gdGgubmV4dFNoYXBlKHRoLmRhdGFzKTtcclxuICAgICAgICAgICAgICAgIHRoLmxvY2FsRHQgKz0gYztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGguZHJhd0N1cnJlbnRTaGFwZShcclxuICAgICAgICAgICAgdGguZGF0YXMsXHJcbiAgICAgICAgICAgIChpLCBsdCwgdGksIGMpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBwZXJjZW50ID0gMTtcclxuICAgICAgICAgICAgICAgIGlmKGkgPT0gdGkpXHJcbiAgICAgICAgICAgICAgICAgICAgcGVyY2VudCA9IGx0IC8gYztcclxuICAgICAgICAgICAgICAgIHJldHVybiBwZXJjZW50O1xyXG4gICAgICAgICAgICB9LCB0aCwgdGguaSArIDEsIGR0IC0gdGgubG9jYWxEdCwgYyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIERyYXcgdGhlIGZpbmFsIGFuaW1hdGlvblxyXG4gICAgKiBAcGFyYW0gdGggY3VycmVudCBwU0Vhc2VJbk91dEN1YmljIGluc3RhbmNlXHJcbiAgICAqL1xyXG4gICAgZmluYWxEcmF3KHRoKSB7XHJcbiAgICAgICAgdGhpcy5kcmF3Q3VycmVudFNoYXBlKHRoaXMuZGF0YXMsICgpID0+IDEsIHRoaXMsIHRoaXMuZGF0YXMubGVuZ3RoLCAwKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogRHJhdyBjdXJyZW50IHNoYXBlIG9uIHNjcmVlblxyXG4gICAgKiBAcGFyYW0gZCB0aGlzLmRhdGFzXHJcbiAgICAqIEBwYXJhbSBwZXJjZW50RnVuY3Rpb24gQ3VycmVudCBhbmltYXRpb24gZ2V0IHBlcmNlbnQgZnVuY3Rpb25cclxuICAgICogQHBhcmFtIHRoIGN1cnJlbnQgcFNFYXNlSW5PdXRDdWJpYyBpbnN0YW5jZVxyXG4gICAgKiBAcGFyYW0gbWF4SSBNYXggcG9pbnRzIGNvdW50XHJcbiAgICAqIEBwYXJhbSBsdCBDdXJyZW50IHRpbWUgdmFsdWVcclxuICAgICogQHBhcmFtIGMgRmluYWwgdGltZSB2YWx1ZSAvIG1heCBwb2ludHMgY291bnRcclxuICAgICovXHJcbiAgICBkcmF3Q3VycmVudFNoYXBlKGQsIHBlcmNlbnRGdW5jdGlvbiwgdGgsIG1heEksIGx0LCBjKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXhJOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHBlcmNlbnQgPSBwZXJjZW50RnVuY3Rpb24oaSwgbHQsIHRoLmksIGMpO1xyXG5cclxuICAgICAgICAgICAgbGV0IG4gPSBpICsgMTtcclxuICAgICAgICAgICAgaWYobiA+PSBkLmxlbmd0aCkgbiA9IDA7XHJcblxyXG4gICAgICAgICAgICBfcFNpbXVsYXRpb25JbnN0YW5jZS5wbG90dGVyLmRyYXdlclxyXG4gICAgICAgICAgICAgICAgLm5vRmlsbCgpXHJcbiAgICAgICAgICAgICAgICAuc3Ryb2tlV2VpZ2h0KDMpXHJcbiAgICAgICAgICAgICAgICAuc3Ryb2tlKDI1NSlcclxuICAgICAgICAgICAgICAgIC5saW5lKFxyXG4gICAgICAgICAgICAgICAgICAgIGRbaV0ucG9zLngsXHJcbiAgICAgICAgICAgICAgICAgICAgZFtpXS5wb3MueSxcclxuICAgICAgICAgICAgICAgICAgICBkW2ldLnBvcy54ICsgKGRbbl0ucG9zLnggLSBkW2ldLnBvcy54KSAqIHBlcmNlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZFtpXS5wb3MueSArIChkW25dLnBvcy55IC0gZFtpXS5wb3MueSkgKiBwZXJjZW50XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgcFNJbnRlcnBvbGF0aW9uO1xyXG4iLCJpbXBvcnQgcFNBbmltYXRpb25IYW5kbGVyIGZyb20gJy4vcFNBbmltYXRpb25IYW5kbGVyJztcclxuXHJcbmNsYXNzIHBTRWFzZUluT3V0Q3ViaWMgZXh0ZW5kcyBwU0FuaW1hdGlvbkhhbmRsZXIge1xyXG4gICAgLyoqXHJcbiAgICAqIEVhc2UgaW4gYW5kIG91dCBjdWJpYyBhbmltYXRpb25cclxuICAgICogQHBhcmFtIHRpbWVMZW5ndGggRHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvbiBpbiBzZWNvbmRzXHJcbiAgICAqIEBwYXJhbSBkYXRhcyBNaW5pbXVtIGFuZCBtYXhpbXVtIHZhbHVlcyAneyBtaW4gOiAwLCBtYXggOiAxIH0nXHJcbiAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGltZUxlbmd0aCwgZGF0YXMpIHtcclxuICAgICAgICBzdXBlcih0aW1lTGVuZ3RoLCBkYXRhcyk7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuZGF0YXMubWluID09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5kYXRhcy5taW4gPSAwO1xyXG4gICAgICAgIGlmKHRoaXMuZGF0YXMubWF4ID09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5kYXRhcy5tYXggPSAxO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBAcGFyYW0gdGltZSBDdXJyZW50IHRpbWUgb2YgdGhlIGFuaW1hdGlvblxyXG4gICAgKiBAcGFyYW0gdGggY3VycmVudCBwU0Vhc2VJbk91dEN1YmljIGluc3RhbmNlXHJcbiAgICAqIEByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcga2V5XHJcbiAgICAqL1xyXG4gICAgdXBkYXRlKHRpbWUsIHRoKSB7XHJcbiAgICAgICAgbGV0IHQgPSB0aW1lIC8gdGgudGltZUxlbmd0aDtcclxuICAgICAgICBpZih0IDwgMC41KVxyXG4gICAgICAgICAgICByZXR1cm4gKDIgKiB0ICogdCkgKiAodGguZGF0YXMubWF4IC0gdGguZGF0YXMubWluKSArIHRoLmRhdGFzLm1pbjtcclxuICAgICAgICByZXR1cm4gKC0xICsgKDQgLSAyICogdCkgKiB0KSAqICh0aC5kYXRhcy5tYXggLSB0aC5kYXRhcy5taW4pICsgdGguZGF0YXMubWluO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBAcGFyYW0gdGltZSBDdXJyZW50IHRpbWUgb2YgdGhlIGFuaW1hdGlvblxyXG4gICAgKiBAcGFyYW0gdGggY3VycmVudCBwU0Vhc2VJbk91dEN1YmljIGluc3RhbmNlXHJcbiAgICAqIEByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgZHJhdyBrZXlcclxuICAgICovXHJcbiAgICBkcmF3KGR0LCB0KSB7IH1cclxuXHJcbiAgICAvKipcclxuICAgICogRHJhdyB0aGUgZmluYWwgYW5pbWF0aW9uXHJcbiAgICAqIEBwYXJhbSB0aCBjdXJyZW50IHBTRWFzZUluT3V0Q3ViaWMgaW5zdGFuY2VcclxuICAgICovXHJcbiAgICBmaW5hbERyYXcodGgpIHtcclxuICAgICAgICByZXR1cm4gdGguZGF0YXMubWF4O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwU0Vhc2VJbk91dEN1YmljO1xyXG4iLCJpbXBvcnQgcFNJbnRlcnBvbGF0aW9uICBmcm9tICcuL2FuaW1hdGlvbnMvcFNJbnRlcnBvbGF0aW9uJztcclxuaW1wb3J0IHBTRWFzZUluT3V0Q3ViaWMgZnJvbSAnLi9hbmltYXRpb25zL3BTRWFzZUluT3V0Q3ViaWMnO1xyXG5cclxuY2xhc3MgQW5pbWF0aW9uIHtcclxuICAgIC8qKlxyXG4gICAgKiBDcmVhdGVzIGEgbmV3IGFuaW1hdGlvblxyXG4gICAgKiBAcGFyYW0gYW5pbWF0aW9uTmFtZSBOYW1lIG9mIHRoZSBhbmltYXRpb24gKCdlYXNlSW5PdXRDdWJpYycsICdpbnRlcnBvbGF0aW9uJylcclxuICAgICogQHBhcmFtIHRpbWVMZW5ndGggTGVuZ3RoIG9mIHRoZSBhbmltYXRpb24gaW4gc2Vjb25kcyAoZGVmYXVsdCA6IDEpXHJcbiAgICAqIEBwYXJhbSBkYXRhcyBPcHRpb25hbCBwYXJhbWV0ZXIgKHNlZSBzcGVjaWZpYyBhbmltYXRpb24gZm9yIGFuaW1hdGlvbiBpbmZvcm1hdGlvbnMpXHJcbiAgICAqL1xyXG4gICAgc3RhdGljIG5ldyhhbmltYXRpb25OYW1lLCB0aW1lTGVuZ3RoID0gMSwgZGF0YXMgPSB7fSkge1xyXG4gICAgICAgIGlmKCFhbmltYXRpb25OYW1lKVxyXG4gICAgICAgICAgICBhbmltYXRpb25OYW1lID0gJ2Vhc2VJbk91dEN1YmljJztcclxuXHJcbiAgICAgICAgc3dpdGNoIChhbmltYXRpb25OYW1lKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2Vhc2VJbk91dEN1YmljJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgcFNFYXNlSW5PdXRDdWJpYyh0aW1lTGVuZ3RoLCBkYXRhcyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ2ludGVycG9sYXRpb24nOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBwU0ludGVycG9sYXRpb24odGltZUxlbmd0aCwgZGF0YXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQW5pbWF0aW9uO1xyXG4iLCJpbXBvcnQgJy4vLi4vdXRpbGl0aWVzL1ZlY3Rvcic7XHJcblxyXG5jbGFzcyBwU1Bsb3R0ZXIge1xyXG4gICAgLyoqXHJcbiAgICAqIEBwYXJhbSBzaW11bGF0b3IgTWFpbiBFbmdpbmUgc2ltdWxhdG9yXHJcbiAgICAqIEBwYXJhbSBkcmF3ZXIgTWFpbiBFbmdpbmUgZHJhd2VyIGluc3RhbmNlXHJcbiAgICAqL1xyXG4gICAgY29uc3RydWN0b3Ioc2ltdWxhdG9yLCBkcmF3ZXIpIHtcclxuICAgICAgICB0aGlzLnNpbXVsYXRvciA9IHNpbXVsYXRvcjtcclxuICAgICAgICB0aGlzLmRyYXdlciAgICA9IGRyYXdlcjtcclxuICAgICAgICB0aGlzLm9iamVjdHNMICA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLmRyYXdlci5wbG90dGVyID0gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogVXBkYXRlIG1haW4gbG9vcFxyXG4gICAgKiBAcGFyYW0gZHQgRGVsdGEgdGltZSBzaW5jZSBsYXN0IHVwZGF0ZSAoaW4gc2Vjb25kcylcclxuICAgICovXHJcbiAgICB1cGRhdGUoZHQpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub2JqZWN0c0wubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIHRoaXMub2JqZWN0c0xbaV0udXBkYXRlKGR0LCB0aGlzLm9iamVjdHNMKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiBEcmF3IG1haW4gbG9vcCAqL1xyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBsZXQgcGxDb25mID0gdGhpcy5zaW11bGF0b3IuY29uZmlnLmVuZ2luZS5wbG90dGVyO1xyXG4gICAgICAgIGxldCBiZyAgICAgPSBwbENvbmYuYmFja2dyb3VuZENvbG9yLmNvbG9yO1xyXG5cclxuICAgICAgICBpZihwbENvbmYuYmFja2dyb3VuZENvbG9yLmRyYXcpXHJcbiAgICAgICAgICAgIGJhY2tncm91bmQoYmcuciwgYmcuZywgYmcuYik7XHJcblxyXG4gICAgICAgIC8vIERyYXcgZXZlcnkgb2JqZWN0IHRvIHRoZSBzY3JlZW5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub2JqZWN0c0wubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIHRoaXMub2JqZWN0c0xbaV0uZHJhdyh0aGlzLmRyYXdlcik7XHJcblxyXG5cclxuICAgICAgICAvLyBEcmF3IHRoZSBncmlkXHJcbiAgICAgICAgaWYodGhpcy5zaW11bGF0b3IuY29uZmlnLmVuZ2luZS5wbG90dGVyLmRpc3BsYXlHcmlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhd2VyXHJcbiAgICAgICAgICAgICAgICAubm9GaWxsKClcclxuICAgICAgICAgICAgICAgIC5zdHJva2UocGxDb25mLmdyaWRDb2xvci5yLCBwbENvbmYuZ3JpZENvbG9yLmcsIHBsQ29uZi5ncmlkQ29sb3IuYiwgcGxDb25mLmdyaWRDb2xvci5hKVxyXG4gICAgICAgICAgICAgICAgLnN0cm9rZVdlaWdodCgwLjUpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHlTID0gTWF0aC5yb3VuZChoZWlnaHQgLyBwbENvbmYuc2NhbGUueSAvIDIpO1xyXG4gICAgICAgICAgICBpZighcGxDb25mLnNxdWFyZUJ5WClcclxuICAgICAgICAgICAgICAgIHlTID0gcGxDb25mLnNjYWxlLnk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gLXBsQ29uZi5zY2FsZS54IC0gMTsgaSA8IHBsQ29uZi5zY2FsZS54ICsgMTsgaSsrKVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IC15UyAtIDE7IGogPCB5UyArIDE7IGorKylcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdlci5yZWN0KGkgKyBwbENvbmYub2Zmc2V0LngsIGogKyBwbENvbmYub2Zmc2V0LnksIDEsIDEpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kcmF3ZXJcclxuICAgICAgICAgICAgICAgIC5ub0ZpbGwoKVxyXG4gICAgICAgICAgICAgICAgLnN0cm9rZShwbENvbmYuZ3JpZENvbG9yLnIsIHBsQ29uZi5ncmlkQ29sb3IuZywgcGxDb25mLmdyaWRDb2xvci5iLCBwbENvbmYuZ3JpZENvbG9yLmEgKyAwLjMpXHJcbiAgICAgICAgICAgICAgICAuc3Ryb2tlV2VpZ2h0KDIpXHJcbiAgICAgICAgICAgICAgICAubGluZSgtcGxDb25mLnNjYWxlLnggKyBwbENvbmYub2Zmc2V0LnggLSAxLCAwLCBwbENvbmYuc2NhbGUueCArIHBsQ29uZi5vZmZzZXQueCArIDEsIDApO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGlmKCFwbENvbmYuc3F1YXJlQnlYKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3ZXIubGluZSgwLCAtcGxDb25mLnNjYWxlLnkgLSAxLCAwLCBwbENvbmYuc2NhbGUueSArIDEpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdlci5saW5lKDAsIC15UyAtIDEsIDAsIHlTICsgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAqIENvbXB1dGUgdGhlIFggYW5kIFkgcGl4ZWwgcG9zaXRpb24gYmFzZWQgb24gdGhlIGRyYXdpbmcgcGFyYW1ldGVyc1xyXG4gICAgKiBAcGFyYW0geFJlbCBYIHJlbGF0aXZlIHBvc2l0aW9uXHJcbiAgICAqIEBwYXJhbSB5UmVsIFkgcmVsYXRpdmUgcG9zaXRpb25cclxuICAgICogQHBhcmFtIHpSZWwgWiByZWxhdGl2ZSBwb3NpdGlvblxyXG4gICAgKiBAcmV0dXJuIHtYLCBZLCBafSBvYmplY3RcclxuICAgICovXHJcbiAgICBjb21wdXRlRm9yWFlaKHhSZWwsIHlSZWwsIHpSZWwpIHtcclxuICAgICAgICBsZXQgYyA9IHRoaXMuc2ltdWxhdG9yLmNvbmZpZy5lbmdpbmUucGxvdHRlcjtcclxuICAgICAgICBsZXQgdiA9IG5ldyBWZWN0b3IoXHJcbiAgICAgICAgICAgICgoeFJlbCAtIGMub2Zmc2V0LngpIC8gYy5zY2FsZS54ICsgMSkgICogd2lkdGggLyAyLFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAoKHhSZWwgKyBjLm9mZnNldC56KSAvIGMuc2NhbGUueiArIDEpICAqIHdpZHRoIC8gMlxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGlmKCFjLnNxdWFyZUJ5WClcclxuICAgICAgICAgICAgdi55ID0gKCgteVJlbCArIGMub2Zmc2V0LnkpIC8gYy5zY2FsZS55ICsgMSkgKiBoZWlnaHQgLyAyO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdi55ID0gKCgteVJlbCArIGMub2Zmc2V0LnkpIC8gYy5zY2FsZS54KSAgICAgKiB3aWR0aCAgLyAyICsgaGVpZ2h0IC8gMjtcclxuXHJcbiAgICAgICAgcmV0dXJuIHY7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBDb21wdXRlIHRoZSBYIGFuZCBZIHBsb3QgcG9zaXRpb24gYmFzZWQgb24gdGhlIHBpeGVsIHBvc2l0aW9uXHJcbiAgICAqIEBwYXJhbSB4UmVsIFggcGl4ZWwgcG9zaXRpb25cclxuICAgICogQHBhcmFtIHlSZWwgWSBwaXhlbCBwb3NpdGlvblxyXG4gICAgKiBAcmV0dXJuIHtYLCBZfSBvYmplY3RcclxuICAgICovXHJcbiAgICBjb21wdXRlRm9yWFlGcm9tUGl4ZWwoeCwgeSkge1xyXG4gICAgICAgIGxldCBjID0gX3BTaW11bGF0aW9uSW5zdGFuY2UuY29uZmlnLmVuZ2luZS5wbG90dGVyO1xyXG4gICAgICAgIGxldCB2ID0gbmV3IFZlY3RvcigoKHggKiAyKSAvIHdpZHRoIC0gMSkgKiBjLnNjYWxlLnggKyBjLm9mZnNldC54KTtcclxuXHJcbiAgICAgICAgaWYoYy5zcXVhcmVCeVgpXHJcbiAgICAgICAgICAgIHYueSA9IC0oKCh5ICogMikgLyBoZWlnaHQgLSAxKSAgICAgICAgICAgKiBjLnNjYWxlLnkgLSBjLm9mZnNldC55KTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHYueSA9IC0oKCgoeSAtIDIgKiBoZWlnaHQpICogMikgLyB3aWR0aCkgKiBjLnNjYWxlLnkgLSBjLm9mZnNldC55KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHY7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHBTUGxvdHRlcjtcclxuIiwiaW1wb3J0IHBTUGxvdHRlciAgZnJvbSAnLi8uLi9kcmF3ZXIvUGxvdHRlcic7XHJcbmltcG9ydCBwU0RyYXdlciAgIGZyb20gJy4vLi4vZHJhd2VyL0RyYXdlcic7XHJcbmltcG9ydCBwUzNERHJhd2VyIGZyb20gJy4vLi4vZHJhd2VyLzNERHJhd2VyJztcclxuXHJcbmNsYXNzIHBTaW11bGF0b3Ige1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5jb25maWcgICAgICAgICA9IHt9O1xyXG4gICAgICAgIHRoaXMuYmVnaW5UaW1lICAgICAgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIHRoaXMubGFzdFVwZGF0ZVRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIHRoaXMubGFzdERyYXdUaW1lICAgPSBEYXRlLm5vdygpO1xyXG5cclxuICAgICAgICB0aGlzLmNvbmZpZy5lbmdpbmUgID0gdGhpcy5nZXREZWZhdWx0RW5naW5lQ29uZmlnKCk7XHJcbiAgICAgICAgdGhpcy5jb25maWcuY3VzdG9tICA9IHt9O1xyXG5cclxuICAgICAgICB3aW5kb3cuZ2V0Q3VzdG9tQ29uZmlnID0gdGhpcy5nZXRDdXN0b21Db25maWc7XHJcbiAgICAgICAgd2luZG93LmdldEVuZ2luZUNvbmZpZyA9IHRoaXMuZ2V0RW5naW5lQ29uZmlnO1xyXG5cclxuICAgICAgICB0aGlzLmR0TW95ICAgICAgICAgPSB0aGlzLmNvbmZpZy5lbmdpbmUucnVubmVyLnJvbGxiYWNrQ29udHJvbC5taW5pbWFsVXBkYXRlRlBTO1xyXG4gICAgICAgIHRoaXMuZHRUb3RhbCAgICAgICA9IDA7XHJcbiAgICAgICAgdGhpcy5kdENvdW50ICAgICAgID0gMDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqIEluc3RhbmNpYXRlIHRoZSBwU2ltdWxhdG9yICovXHJcbiAgICBpbnN0YW5jaWF0ZSgpIHtcclxuICAgICAgICB3aW5kb3cucHJlUnVuU2ltdWxhdG9yKHRoaXMpOyAvLyBwcmVtYWluIGZ1bmN0aW9uXHJcblxyXG4gICAgICAgIHRoaXMuY3JlYXRlUDVJbnN0YW5jZSgpO1xyXG4gICAgICAgIGlmKCF0aGlzLmNvbmZpZy5lbmdpbmUucGxvdHRlci5pc18zRClcclxuICAgICAgICAgICAgdGhpcy5wbG90dGVyID0gbmV3IHBTUGxvdHRlcih0aGlzLCBuZXcgcFNEcmF3ZXIoKSk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0aGlzLnBsb3R0ZXIgPSBuZXcgcFNQbG90dGVyKHRoaXMsIG5ldyBwUzNERHJhd2VyKCkpO1xyXG5cclxuICAgICAgICB0aGlzLm1vdXNlUG9zID0gdGhpcy5wbG90dGVyLmNvbXB1dGVGb3JYWUZyb21QaXhlbChtb3VzZVgsIG1vdXNlWSk7XHJcblxyXG4gICAgICAgIHdpbmRvdy5ydW5TaW11bGF0b3IodGhpcyk7IC8vIG1haW4gZnVuY3Rpb25cclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIC8qKiBDcmVhdGVzIGEgbmV3IHA1IGluc3RhbmNlIGFuZCBjcmVhdGVzIGxvb3BzIGZvciB0aGUgc2ltdWxhdGlvbiAqL1xyXG4gICAgY3JlYXRlUDVJbnN0YW5jZSgpIHtcclxuICAgICAgICBsZXQgcCA9IHRoaXMuZ2V0Q2FudmFzUHJvcG9ydGlvbnModGhpcy5jb25maWcuZW5naW5lLndpbmRvdy5wcm9wb3J0aW9ucyk7XHJcblxyXG4gICAgICAgIGlmKCF0aGlzLmNvbmZpZy5lbmdpbmUucGxvdHRlci5pc18zRClcclxuICAgICAgICAgICAgdGhpcy5jYW52YXMgPSBjcmVhdGVDYW52YXMocC53LCBwLmgpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhpcy5jYW52YXMgPSBjcmVhdGVDYW52YXMocC53LCBwLmgsIFdFQkdMKTtcclxuXHJcbiAgICAgICAgdGhpcy5jYW52YXMucGFyZW50KHRoaXMuY29uZmlnLmVuZ2luZS5ydW5uZXIuZGl2SWQpO1xyXG5cclxuICAgICAgICBsZXQgcnUgPSB0aGlzLmNvbmZpZy5lbmdpbmUucnVubmVyO1xyXG4gICAgICAgIGlmKHJ1LlVQREFURV9GUFMgPj0gcnUuRFJBV19GUFMpIGZyYW1lUmF0ZShydS5VUERBVEVfRlBTKTtcclxuICAgICAgICBlbHNlIGNvbnNvbGUuZXJyb3IoJ1RoZSBVcGRhdGVzIEZQUyBtdXN0IGJlIHN1cGVyaW9yIGFzIHRoZSBEcmF3cyBGUFMuJylcclxuXHJcblxyXG4gICAgICAgIC8vIHJ1bnMgZXZlcnkgdGltZSBpdCdzIHBvc3NpYmxlXHJcbiAgICAgICAgd2luZG93LmRyYXcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgbGV0IHMgICAgICAgICAgICA9IF9wU2ltdWxhdGlvbkluc3RhbmNlO1xyXG4gICAgICAgIFx0bGV0IGN1cnJlbnRUaW1lICA9IERhdGUubm93KCk7XHJcbiAgICAgICAgXHRsZXQgZHQgICAgICAgICAgID0gKGN1cnJlbnRUaW1lIC0gcy5sYXN0VXBkYXRlVGltZSkgLyAxMDAwO1xyXG4gICAgICAgICAgICBsZXQgY3JpdGlxRHQgICAgID0gcy5kdE1veSArIHMuZHRNb3kgKiBzLmNvbmZpZy5lbmdpbmUucnVubmVyLnJvbGxiYWNrQ29udHJvbC5tYXhTdGFuZGFyZERldmlhdGlvbjtcclxuXHJcbiAgICAgICAgICAgIHMubW91c2VQb3MgPSBzLnBsb3R0ZXIuY29tcHV0ZUZvclhZRnJvbVBpeGVsKG1vdXNlWCwgbW91c2VZKTtcclxuXHJcbiAgICAgICAgICAgIGlmKGR0ID4gY3JpdGlxRHQpXHJcbiAgICAgICAgICAgICAgICBkdCA9IHMuZHRNb3k7XHJcbiAgICAgICAgXHRzLmxhc3RVcGRhdGVUaW1lID0gY3VycmVudFRpbWU7XHJcbiAgICAgICAgXHRzLnBsb3R0ZXIudXBkYXRlKGR0ICogcy5jb25maWcuZW5naW5lLnJ1bm5lci5zaW11bGF0aW9uU3BlZWQpO1xyXG5cclxuICAgICAgICAgICAgaWYoY3VycmVudFRpbWUgLSBzLmxhc3REcmF3VGltZSA+PSAxIC8gcy5jb25maWcuZW5naW5lLnJ1bm5lci5EUkFXX0ZQUykge1xyXG4gICAgICAgICAgICAgICAgaWYoZHQgPD0gY3JpdGlxRHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzLmR0VG90YWwgKz0gZHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcy5kdENvdW50ICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYocy5kdENvdW50ICUgcy5jb25maWcuZW5naW5lLnJ1bm5lci5yb2xsYmFja0NvbnRyb2wuYXZlcmFnZVRpbWVTYW1wbGUgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzLmR0TW95ICAgPSBzLmR0VG90YWwgLyBzLmR0Q291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuZHRUb3RhbCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuZHRDb3VudCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHMucGxvdHRlci5kcmF3KCk7XHJcbiAgICAgICAgICAgICAgICBzLmxhc3REcmF3VGltZSA9IGN1cnJlbnRUaW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gcnVucyBldmVyeSB0aW1lIHRoZSB3aW5kb3cgaXMgcmVzaXplZFxyXG4gICAgICAgIHdpbmRvdy53aW5kb3dSZXNpemVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGxldCBwID0gX3BTaW11bGF0aW9uSW5zdGFuY2UuZ2V0Q2FudmFzUHJvcG9ydGlvbnMoX3BTaW11bGF0aW9uSW5zdGFuY2UuY29uZmlnLmVuZ2luZS53aW5kb3cucHJvcG9ydGlvbnMpO1xyXG4gICAgICAgICAgICByZXNpemVDYW52YXMocC53LCBwLmgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIHJ1biBlYWNoIHRpbWUgbW91c2UgaXMgcHJlc3NlZFxyXG4gICAgICAgIHdpbmRvdy5tb3VzZURyYWdnZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYoIV9wU2ltdWxhdGlvbkluc3RhbmNlLmNvbmZpZy5lbmdpbmUucnVubmVyLm1vdmFibGUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBsZXQgbW91c2VQb3MgPSBfcFNpbXVsYXRpb25JbnN0YW5jZS5wbG90dGVyLmNvbXB1dGVGb3JYWUZyb21QaXhlbChtb3VzZVgsIG1vdXNlWSk7XHJcbiAgICAgICAgICAgIGlmKCFfcFNpbXVsYXRpb25JbnN0YW5jZS5tb3VzZVBvcy5lcXVhbHMobW91c2VQb3MpKSB7XHJcbiAgICAgICAgICAgICAgICBfcFNpbXVsYXRpb25JbnN0YW5jZS5jb25maWcuZW5naW5lLnBsb3R0ZXIub2Zmc2V0LnggLT0gbW91c2VQb3MueCAtIF9wU2ltdWxhdGlvbkluc3RhbmNlLm1vdXNlUG9zLng7XHJcbiAgICAgICAgICAgICAgICBfcFNpbXVsYXRpb25JbnN0YW5jZS5jb25maWcuZW5naW5lLnBsb3R0ZXIub2Zmc2V0LnkgLT0gbW91c2VQb3MueSAtIF9wU2ltdWxhdGlvbkluc3RhbmNlLm1vdXNlUG9zLnk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLyoqIEByZXR1cm4ge3csIGh9IHByb3BvcnRpb25zIG9mIHRoZSBjYW52YXMgYmFzZWQgb24gdGhlIHBhcmFtZXRlcnMgKi9cclxuICAgIGdldENhbnZhc1Byb3BvcnRpb25zKGNQKSB7XHJcbiAgICAgICAgbGV0IHcsIGg7XHJcblxyXG4gICAgICAgIGlmKGNQLmlzUmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgdyA9IHdpbmRvd1dpZHRoICAqIGNQLndpZHRoO1xyXG4gICAgICAgICAgICBoID0gd2luZG93SGVpZ2h0ICogY1AuaGVpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdyA9IGNQLndpZHRoICArIFwicHhcIjtcclxuICAgICAgICAgICAgaCA9IGNQLmhlaWdodCArIFwicHhcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7dywgaH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEBwYXJhbSBjdXN0b21PYmplY3QgdGhlIE9iamVjdCB0aGF0IGlzIGdvaW5nIHRvIGJlIHNpbXVsYXRlZCAoY2FuIGJlIGluc3RhbmNpYXRlZCBvciBub3QpXHJcbiAgICAqIEBwYXJhbSBudW1iZXIgTnVtYmVyIG9mIG9iamVjdHMgdG8gYmUgaW5zdGFuY2lhdGVkXHJcbiAgICAqIEBwYXJhbSBwYXJhbXMgVGhlIHBhcmFtZXRlcnMgaW4gdGhlIGZ1bmN0aW9uXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIGFkZE9iamVjdHMoY3VzdG9tT2JqZWN0LCBudW1iZXIgPSAxLCAuLi5wYXJhbXMpIHtcclxuICAgICAgICBpZihjdXN0b21PYmplY3QgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlcjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29weVBhcmFtc1RlbXAgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcGFyYW1zLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1tqXSBpbnN0YW5jZW9mIEFycmF5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIHBhcmFtc1tqXVswXSAhPSB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgcGFyYW1zW2pdWzFdICE9IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiBwYXJhbXNbal1bMV0gaW5zdGFuY2VvZiBGdW5jdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICAgICAocGFyYW1zW2pdWzBdID09IHRoaXMuY29uZmlnLmVuZ2luZS5ydW5uZXIuYWRkaW5nT2JqZWN0c0NvbmZpZ0tleVdvcmRzLnJ1bkZ1bmN0aW9ucylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlQYXJhbXNUZW1wLnB1c2gocGFyYW1zW2pdWzFdKC4uLnBhcmFtc1tqXS5zbGljZSgyKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHBhcmFtc1tqXVswXSA9PSB0aGlzLmNvbmZpZy5lbmdpbmUucnVubmVyLmFkZGluZ09iamVjdHNDb25maWdLZXlXb3Jkcy5ydW5DbGFzcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlQYXJhbXNUZW1wLnB1c2gobmV3IHBhcmFtc1tqXVsxXSguLi5wYXJhbXNbal0uc2xpY2UoMikpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3B5UGFyYW1zVGVtcC5wdXNoKHBhcmFtc1tqXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsb3R0ZXIub2JqZWN0c0wucHVzaChuZXcgY3VzdG9tT2JqZWN0KC4uLmNvcHlQYXJhbXNUZW1wKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0aGlzLnBsb3R0ZXIub2JqZWN0c0wucHVzaChjdXN0b21PYmplY3QpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKiogQHJldHVybiB0aGUgZGVmYXVsdCBjb25maWd1cmF0aW9uIG9mIHRoZSBlbmdpbmUgKi9cclxuICAgIGdldERlZmF1bHRFbmdpbmVDb25maWcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcnVubmVyIDoge1xyXG4gICAgICAgICAgICAgICAgZGl2SWQgOiAnc2ltdWxhdGlvbkNvbnRlbnQnLFxyXG4gICAgICAgICAgICAgICAgVVBEQVRFX0ZQUyA6IDEyMCxcclxuICAgICAgICAgICAgICAgIERSQVdfRlBTICAgOiA2MCxcclxuICAgICAgICAgICAgICAgIHNpbXVsYXRpb25TcGVlZCA6IDEsXHJcbiAgICAgICAgICAgICAgICBhZGRpbmdPYmplY3RzQ29uZmlnS2V5V29yZHMgOiB7ICAvLyBrZXl3b3JkcyBmb3Igd2hlbiB3ZSBhZGQgb2JqZWN0cyBhdCB0aGUgc3RhcnQgb2YgdGhlIGVuZ2luZVxyXG4gICAgICAgICAgICAgICAgICAgIHJ1bkZ1bmN0aW9ucyA6ICdfUlVOX0YnLCAvLyBydW4gYSBmdW5jdGlvbiB3aXRoICAgICAgIFsnX1JVTl9GJywgZnVuY3Rpb25OYW1lLCBwYXJhbTEsIHBhcmFtMiwgLi4uXSxcclxuICAgICAgICAgICAgICAgICAgICBydW5DbGFzcyAgICAgOiAnX1JVTl9DJyAgLy8gaW5zdGFuY2lhdGVzIGEgY2xhc3Mgd2l0aCBbJ19SVU5fQycsIGNsYXNzTmFtZSAgICwgcGFyYW0xLCBwYXJhbTIsIC4uLl1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByb2xsYmFja0NvbnRyb2wgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4U3RhbmRhcmREZXZpYXRpb24gOiAwLjgsICAvLyBtYXhpbXVtIHRpY2sgZGV2aWF0aW9uIHBlcmNlbnRhZ2UgZm9yIHRoZSBzb2Z0d2FyZSB0byBjb25zaWRlciBhcyBhIHJvbGxiYWNrIChpbiBzZWNvbmRzKVxyXG4gICAgICAgICAgICAgICAgICAgIGF2ZXJhZ2VUaW1lU2FtcGxlICAgIDogMjAsICAgLy8gc2FtcGxlIHNpemUgZm9yIHRpY2sgYXZlcmFnZSAoaW4gc2Vjb25kcyksXHJcbiAgICAgICAgICAgICAgICAgICAgbWluaW1hbFVwZGF0ZUZQUyAgICAgOiAwLjE1ICAvLyBtaW5pbWFsIHVwZGF0ZSBmcmFtZXNcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBpc19tb3ZhYmxlIDogZmFsc2UgLy8gY2FuIHRoZSBjdXJzb3IgbW92ZSBvbiB0aGUgc2NyZWVuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHdpbmRvdyA6IHtcclxuICAgICAgICAgICAgICAgIHByb3BvcnRpb25zIDogeyAgLy8gd2luZG93IGhlaWdodCBhbmQgd2lkdGggb24gcmVsYXRpdmUgb3IgYWJzb2x1dGUgc2l6ZXNcclxuICAgICAgICAgICAgICAgICAgICBpc1JlbGF0aXZlIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCAgOiAwLjk5LFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA6IDAuOTlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBcdHBsb3R0ZXIgOiB7XHJcbiAgICAgICAgXHRcdHNjYWxlIDogeyAgLy8gZGlzcGxheXMgeCByZWxhdGl2ZSB1bml0cyBvbiBlYWNoIHNpZGVcclxuICAgICAgICBcdFx0XHR4IDogMTAsXHJcbiAgICAgICAgXHRcdFx0eSA6IDEwLFxyXG4gICAgICAgICAgICAgICAgICAgIHogOiAxMFxyXG4gICAgICAgIFx0XHR9LFxyXG4gICAgICAgIFx0XHRvZmZzZXQgOiB7ICAvLyB4IGFuZCB5IHJlbGF0aXZlIG9mZnNldFxyXG4gICAgICAgIFx0XHRcdHggOiAwLFxyXG4gICAgICAgIFx0XHRcdHkgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHogOiAwXHJcbiAgICAgICAgXHRcdH0sXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3IgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHJhdyA6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgOiB7IHIgOiAwICwgZyA6IDAgLCBiIDogMCB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc3F1YXJlQnlYICAgICAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc18zRCAgICAgICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGdyaWRDb2xvciAgICAgICA6IHsgciA6IDI1NSwgZyA6IDI1NSwgYiA6IDI1NSwgYSA6IDAuMyB9LFxyXG4gICAgICAgIFx0XHRkaXNwbGF5R3JpZCAgICAgOiBmYWxzZSAgLy8gdHJ1ZSA6IGRpc3BsYXkgZ3JhcGggb24gdGhlIHNjcmVlblxyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEBwYXJhbSBjb25maWdGdW5jIFRoZSBmdW5jdGlvbiB0aGF0IG1vZGlmaWVzIGVuZ2luZSBjb25maWd1cmF0aW9uXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIHNldFByZUVuZ2luZUNvbmZpZyhjb25maWdGdW5jKSB7XHJcbiAgICAgICAgY29uZmlnRnVuYyh0aGlzLmNvbmZpZy5lbmdpbmUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBAcGFyYW0gY29uZmlnRnVuYyBUaGUgZnVuY3Rpb24gdGhhdCBtb2RpZmllcyBlbmdpbmUgY29uZmlndXJhdGlvblxyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgICBzZXRFbmdpbmVDb25maWcoY29uZmlnRnVuYykge1xyXG4gICAgICAgIGNvbmZpZ0Z1bmModGhpcy5jb25maWcuZW5naW5lKTtcclxuICAgICAgICB3aW5kb3cud2luZG93UmVzaXplZCgpOyAvLyBpZiBwcm9wb3J0aW9ucyBjaGFuZ2VkXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEBwYXJhbSBjb25maWcgVGhlIGZ1bmN0aW9uIHRoYXQgbW9kaWZpZXMgY3VzdG9tIGNvbmZpZ3VyYXRpb25cclxuICAgICogQHJldHVybiB0aGlzXHJcbiAgICAqL1xyXG4gICAgc2V0Q3VzdG9tQ29uZmlnKGNvbmZpZ0Z1bmMpIHtcclxuICAgICAgICBjb25maWdGdW5jKHRoaXMuY29uZmlnLmN1c3RvbSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEByZXR1cm4gdGhlIGVuZ2luZSBjb25maWd1cmF0aW9uXHJcbiAgICAqL1xyXG4gICAgZ2V0RW5naW5lQ29uZmlnKCkge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cuX3BTaW11bGF0aW9uSW5zdGFuY2UuY29uZmlnLmVuZ2luZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogQHJldHVybiB0aGUgY3VzdG9tIGNvbmZpZ3VyYXRpb25cclxuICAgICovXHJcbiAgICBnZXRDdXN0b21Db25maWcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5fcFNpbXVsYXRpb25JbnN0YW5jZS5jb25maWcuY3VzdG9tO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBnZXRQU0VuZ2luZVZhcigpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAqIEBUT0RPXHJcbiAgICAgICAgKi9cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgcFNpbXVsYXRvcjtcclxuIiwiY2xhc3MgcFNEcmF3ZXIge1xyXG4gICAgLyoqIENvbnN0cnVjdCB0aGUgbWFpbiBwU0VuZ2luZSBkcmF3ZXIgKi9cclxuICAgIGNvbnN0cnVjdG9yKHBsb3R0ZXIpIHtcclxuICAgICAgICB0aGlzLnBsb3R0ZXIgPSBudWxsOyAvLyBzZXQgd2hlbiBsb2FkZWQgaW4gdGhlIFBsb3R0ZXIgY2xhc3NcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBEcmF3IGEgcG9pbnQgdG8gdGhlIHNjcmVlblxyXG4gICAgKiBAcGFyYW0geCBYIHNpbXVsYXRpb24gY29vcmRpbmF0ZVxyXG4gICAgKiBAcGFyYW0geSBZIHNpbXVsYXRpb24gY29vcmRpbmF0ZVxyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgICBwb2ludCh4LCB5KSB7XHJcbiAgICAgICAgbGV0IHYgPSB0aGlzLnBsb3R0ZXIuY29tcHV0ZUZvclhZWih4LCB5KTtcclxuICAgICAgICBwb2ludCh2LngsIHYueSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIERyYXcgYSBsaW5lIGZyb20gb25lIHBvaW50IHRvIHRoZSBvdGhlciB0byB0aGUgc2NyZWVuXHJcbiAgICAqIEBwYXJhbSB4MCBYIGluaXRpYWwgc2ltdWxhdGlvbiBjb29yZGluYXRlXHJcbiAgICAqIEBwYXJhbSB5MCBZIGluaXRpYWwgc2ltdWxhdGlvbiBjb29yZGluYXRlXHJcbiAgICAqIEBwYXJhbSB4MSBYIGVuZCBzaW11bGF0aW9uIGNvb3JkaW5hdGVcclxuICAgICogQHBhcmFtIHkxIFkgZW5kIHNpbXVsYXRpb24gY29vcmRpbmF0ZVxyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgICBsaW5lKHgwLCB5MCwgeDEsIHkxKSB7XHJcbiAgICAgICAgbGV0IHYwID0gdGhpcy5wbG90dGVyLmNvbXB1dGVGb3JYWVooeDAsIHkwKTtcclxuICAgICAgICBsZXQgdjEgPSB0aGlzLnBsb3R0ZXIuY29tcHV0ZUZvclhZWih4MSwgeTEpO1xyXG4gICAgICAgIGxpbmUodjAueCwgdjAueSwgdjEueCwgdjEueSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIERyYXcgYW4gZWxsaXBzZVxyXG4gICAgKiBAcGFyYW0geCBYIGNlbnRlciBzaW11bGF0aW9uIGNvb3JkaW5hdGVcclxuICAgICogQHBhcmFtIHkgWSBjZW50ZXIgc2ltdWxhdGlvbiBjb29yZGluYXRlXHJcbiAgICAqIEBwYXJhbSByeCBYIGVsbGlwc2UgcmFkaXVzXHJcbiAgICAqIEBwYXJhbSByeSBZIGVsbGlwc2UgcmFkaXVzXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIGVsbGlwc2UoeCwgeSwgcngsIHJ5KSB7XHJcbiAgICAgICAgbGV0IHYgPSB0aGlzLnBsb3R0ZXIuY29tcHV0ZUZvclhZWih4LCB5KTtcclxuICAgICAgICBlbGxpcHNlKHYueCwgdi55LCByeCwgcnkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBEcmF3IGEgY2lyY2xlXHJcbiAgICAqIEBwYXJhbSB4IFggY2VudGVyIHNpbXVsYXRpb24gY29vcmRpbmF0ZVxyXG4gICAgKiBAcGFyYW0geSBZIGNlbnRlciBzaW11bGF0aW9uIGNvb3JkaW5hdGVcclxuICAgICogQHBhcmFtIHIgQ2lyY2xlIHJhZGl1c1xyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgICBjaXJjbGUoeCwgeSwgcikge1xyXG4gICAgXHRyZXR1cm4gdGhpcy5lbGxpcHNlKHgsIHksIHIsIHIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBEcmF3IGEgcmVjdGFuZ2xlXHJcbiAgICAqIEBwYXJhbSB4IFggYm90dG9tIGxlZnQgc2ltdWxhdGlvbiBjb29yZGluYXRlXHJcbiAgICAqIEBwYXJhbSB5IFkgYm90dG9tIGxlZnQgc2ltdWxhdGlvbiBjb29yZGluYXRlXHJcbiAgICAqIEBwYXJhbSB3IFJlY3RhbmdsZSB3aWR0aFxyXG4gICAgKiBAcGFyYW0gaCBSZWN0YW5nbGUgaGVpZ2h0XHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIHJlY3QoeCwgeSwgdywgaCkge1xyXG4gICAgICAgIGxldCBwbENvbmYgPSB0aGlzLnBsb3R0ZXIuc2ltdWxhdG9yLmNvbmZpZy5lbmdpbmUucGxvdHRlcjtcclxuXHJcbiAgICAgICAgbGV0IHdGID0gdGhpcy5wbG90dGVyLmNvbXB1dGVGb3JYWVoodyAtIHBsQ29uZi5zY2FsZS54ICsgcGxDb25mLm9mZnNldC54LCAwKS54O1xyXG4gICAgICAgIGxldCBoRiA9IHRoaXMucGxvdHRlci5jb21wdXRlRm9yWFlaKFxyXG4gICAgICAgICAgICBoIC0gcGxDb25mLnNjYWxlLnggKyBwbENvbmYub2Zmc2V0LngsXHJcbiAgICAgICAgICAgIGggLSBwbENvbmYuc2NhbGUueSArIHBsQ29uZi5vZmZzZXQueVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGlmKHBsQ29uZi5zcXVhcmVCeVgpXHJcbiAgICAgICAgICAgIGhGID0gaEYueDtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGhGID0gaEYueTtcclxuXHJcbiAgICAgICAgdGhpcy5wdXNoKClcclxuICAgICAgICAgICAgLnRyYW5zbGF0ZSh4IC0gcGxDb25mLm9mZnNldC54LCB5IC0gcGxDb25mLm9mZnNldC55KVxyXG4gICAgICAgICAgICAuYmVnaW5TaGFwZSgpO1xyXG4gICAgICAgICAgICAgICAgdmVydGV4KDAgLCAgMCApO1xyXG4gICAgICAgICAgICAgICAgdmVydGV4KHdGLCAgMCApO1xyXG4gICAgICAgICAgICAgICAgdmVydGV4KHdGLCAtaEYpO1xyXG4gICAgICAgICAgICAgICAgdmVydGV4KDAgLCAtaEYpO1xyXG4gICAgICAgICAgICB0aGlzLmVuZFNoYXBlKENMT1NFKVxyXG4gICAgICAgIC5wb3AoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICogU2V0IHN0cm9rZSBjb2xvclxyXG4gICAgKiBAcGFyYW0gciBSZWQgdmFsdWUgKDAgdG8gMjU1KSwgb3IgJ3JnYihyLCBnLCBiKScgb3IgJ3JnYmEociwgZywgYiwgYSknXHJcbiAgICAqIEBwYXJhbSBnIEdyZWVuIHZhbHVlICgwIHRvIDI1NSlcclxuICAgICogQHBhcmFtIGIgQmx1ZSB2YWx1ZSAoMCB0byAyNTUpXHJcbiAgICAqIEBwYXJhbSBhIEFscGhhIHZhbHVlICgwIHRvIDI1NSlcclxuICAgICogQHJldHVybiB0aGlzXHJcbiAgICAqL1xyXG4gICAgc3Ryb2tlKHIsIGcsIGIsIGEpIHtcclxuICAgICAgICBpZihhID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZihiID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgaWYoZyA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlKHIpO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZShyLCBnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBzdHJva2UociwgZywgYik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgc3Ryb2tlKGByZ2JhKCR7cn0sICR7Z30sICR7Yn0sICR7YX0pYCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFNldCBzdHJva2Ugd2VpZ2h0XHJcbiAgICAqIEBwYXJhbSBuIFN0cm9rZSB3ZWlnaHQgKGludGVnZXIpXHJcbiAgICAqL1xyXG4gICAgc3Ryb2tlV2VpZ2h0KG4pIHtcclxuICAgICAgICBzdHJva2VXZWlnaHQobik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFNldCBmaWxsIGNvbG9yXHJcbiAgICAqIEBwYXJhbSByIFJlZCB2YWx1ZSAoMCB0byAyNTUpLCBvciAncmdiKHIsIGcsIGIpJyBvciAncmdiYShyLCBnLCBiLCBhKSdcclxuICAgICogQHBhcmFtIGcgR3JlZW4gdmFsdWUgKDAgdG8gMjU1KVxyXG4gICAgKiBAcGFyYW0gYiBCbHVlIHZhbHVlICgwIHRvIDI1NSlcclxuICAgICogQHBhcmFtIGEgQWxwaGEgdmFsdWUgKDAgdG8gMjU1KVxyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgICBmaWxsKHIsIGcsIGIsIGEpIHtcclxuICAgICAgICBpZihhID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZihiID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgaWYoZyA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbChyKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBmaWxsKHIsIGcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGZpbGwociwgZywgYik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgZmlsbChgcmdiYSgke3J9LCAke2d9LCAke2J9LCAke2F9KWApO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICB0cmFuc2xhdGUoeCwgeSkge1xyXG4gICAgICAgIGxldCB2ID0gdGhpcy5wbG90dGVyLmNvbXB1dGVGb3JYWVooeCwgeSk7XHJcbiAgICAgICAgdHJhbnNsYXRlKHYueCwgdi55KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBiZWdpblNoYXBlKFRZUEUpIHtcclxuICAgICAgICBiZWdpblNoYXBlKFRZUEUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGVuZFNoYXBlKFRZUEUpIHtcclxuICAgICAgICBlbmRTaGFwZShUWVBFKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICB2ZXJ0ZXgoeCwgeSkge1xyXG4gICAgICAgIGxldCB2ID0gdGhpcy5wbG90dGVyLmNvbXB1dGVGb3JYWVooeCwgeSk7XHJcbiAgICAgICAgdmVydGV4KHYueCwgdi55KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwb3AoKSB7XHJcbiAgICAgICAgcG9wKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVzaCgpIHtcclxuICAgICAgICBwdXNoKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgIC8qKiBSZW1vdmUgc3Ryb2tlIG9mIHRoZSBzaGFwZSAqL1xyXG4gICAgbm9TdHJva2UoKSB7XHJcbiAgICAgICAgbm9TdHJva2UoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKiogTm8gZmlsbCB0aGUgc2hhcGUgKi9cclxuICAgIG5vRmlsbCgpIHtcclxuICAgICAgICBub0ZpbGwoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgcFNEcmF3ZXI7XHJcbiIsImNsYXNzIHBTM0REcmF3ZXIge1xyXG4gICAgLyoqIENvbnN0cnVjdCB0aGUgbWFpbiBwUzNERW5naW5lIGRyYXdlciAqL1xyXG4gICAgY29uc3RydWN0b3IocGxvdHRlcikge1xyXG4gICAgICAgIHRoaXMucGxvdHRlciA9IG51bGw7IC8vIHNldCB3aGVuIGxvYWRlZCBpbiB0aGUgUGxvdHRlciBjbGFzc1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwUzNERHJhd2VyO1xyXG4iLCJpbXBvcnQgJy4vLi4vLi4vdXRpbGl0aWVzL1ZlY3Rvcic7XHJcbmltcG9ydCAnLi8uLi9BbmltYXRpb24nO1xyXG5pbXBvcnQgJy4vVGV4dCc7XHJcblxyXG5cclxuY2xhc3MgcFNQb2ludCB7XHJcbiAgICAvKipcclxuICAgICogQ3JlYXRlcyBhIG5ldyBQb2ludFxyXG4gICAgKiBAcGFyYW0geCBYIHBvaW50IHBvc2l0aW9uXHJcbiAgICAqIEBwYXJhbSB5IFkgcG9pbnQgcG9zaXRpb25cclxuICAgICogQHBhcmFtIGNvbG9yIGRyYXdpbmcgY29sb3Igb2YgdGhlIHBvaW50XHJcbiAgICAqIEBwYXJhbSBwb2ludE5hbWUgbmFtZSBvZiB0aGUgcG9pbnQgKGluIExhVGVYKVxyXG4gICAgKiBAcGFyYW0gcG9pbnRTaXplIFNpemUgb2YgdGhlIHBvaW50IChkZWZhdWx0IDYpXHJcbiAgICAqIEBwYXJhbSB2ZWN0b3JOYW1lIE5hbWUgb2YgdGhlIHZlY3RvclxyXG4gICAgKiBAcGFyYW0gZHJhd09yaWdpblZlY3RvciB0cnVlIDogZHJhdyB0aGUgdmVjdG9yIGZyb20gdGhlIG9yaWdpbiB0byB0aGlzIHBvaW50XHJcbiAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoeCwgeSwgY29sb3IgPSAnd2hpdGUnLCBwb2ludE5hbWUsIHBvaW50U2l6ZSA9IDYsIHZlY3Rvck5hbWUsIGRyYXdPcmlnaW5WZWN0b3IgPSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5wb3MgPSBuZXcgVmVjdG9yKHgsIHksIGNvbG9yLCB2ZWN0b3JOYW1lKTtcclxuXHJcbiAgICAgICAgaWYocG9pbnROYW1lICE9IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5wb2ludE5hbWUgPSBuZXcgcFNUZXh0KHBvaW50TmFtZSwgdGhpcy5wb3MsIDE4LCBjb2xvcik7XHJcblxyXG4gICAgICAgIHRoaXMuZHJhd09yaWdpblZlY3RvciA9IGRyYXdPcmlnaW5WZWN0b3I7XHJcbiAgICAgICAgdGhpcy5wb2ludFNpemUgICAgICAgID0gcG9pbnRTaXplO1xyXG4gICAgICAgIHRoaXMucG9pbnRTaXplRHJhd2luZyA9IHBvaW50U2l6ZTtcclxuXHJcbiAgICAgICAgdGhpcy50ZXh0UGFkZGluZyA9IDAuNDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogVXBkYXRlcyB0aGUgcG9pbnRcclxuICAgICogQHBhcmFtIGR0IERlbHRhIHRpbWUgc2luY2UgbGFzdCB1cGRhdGVcclxuICAgICovXHJcbiAgICB1cGRhdGUoZHQpIHsgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBEcmF3IHRoZSBwb2ludCB0byB0aGUgc2NyZWVuXHJcbiAgICAqL1xyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBsZXQgZHJhd2VyID0gX3BTaW11bGF0aW9uSW5zdGFuY2UucGxvdHRlci5kcmF3ZXI7XHJcblxyXG4gICAgICAgIC8vIFBPSU5UIExPQ0FUSU9OXHJcbiAgICAgICAgZHJhd2VyXHJcbiAgICAgICAgICAgIC5maWxsKHBhcnNlSW50KHRoaXMucG9zLmNvbG9yWzBdICogMC40KSwgcGFyc2VJbnQodGhpcy5wb3MuY29sb3JbMV0gKiAwLjQpLCBwYXJzZUludCh0aGlzLnBvcy5jb2xvclsyXSAqIDAuNCkpXHJcbiAgICAgICAgICAgIC5ub1N0cm9rZSgpXHJcbiAgICAgICAgICAgIC5lbGxpcHNlKHRoaXMucG9zLngsIHRoaXMucG9zLnksIHRoaXMucG9pbnRTaXplRHJhd2luZywgdGhpcy5wb2ludFNpemVEcmF3aW5nKVxyXG4gICAgICAgICAgICAuc3Ryb2tlKHRoaXMucG9zLmNvbG9yKVxyXG4gICAgICAgICAgICAuc3Ryb2tlV2VpZ2h0KDEuMSlcclxuICAgICAgICAgICAgLm5vRmlsbCgpXHJcbiAgICAgICAgICAgIC5lbGxpcHNlKHRoaXMucG9zLngsIHRoaXMucG9zLnksIHRoaXMucG9pbnRTaXplRHJhd2luZywgdGhpcy5wb2ludFNpemVEcmF3aW5nKVxyXG4gICAgICAgIDtcclxuXHJcbiAgICAgICAgLy8gT1JJR0lOIFZFQ1RPUlxyXG4gICAgICAgIGlmKHRoaXMucG9zLm5hbWUgIT0gdW5kZWZpbmVkICYmIHRoaXMuZHJhd09yaWdpblZlY3RvcilcclxuICAgICAgICAgICAgdGhpcy5wb3MuZHJhdygpO1xyXG5cclxuICAgICAgICAvLyBQT0lOVCBOQU1FXHJcbiAgICAgICAgaWYodGhpcy5wb2ludE5hbWUgPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMucG9pbnROYW1lLnBvcyA9ICh0aGlzLnBvcy5jb3B5KCkpLmFkZCgwLCB0aGlzLnRleHRQYWRkaW5nKTtcclxuICAgICAgICBpZih0aGlzLnBvcy5uYW1lICE9IHVuZGVmaW5lZCAmJiB0aGlzLmRyYXdPcmlnaW5WZWN0b3IgJiYgdGhpcy5wb3MueSA8IDApXHJcbiAgICAgICAgICAgIHRoaXMucG9pbnROYW1lLnBvcyA9ICh0aGlzLnBvcy5jb3B5KCkpLmFkZCgwLCAtdGhpcy50ZXh0UGFkZGluZyk7XHJcblxyXG4gICAgICAgIHRoaXMucG9pbnROYW1lLmRyYXcoZHJhd2VyKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgcFNQb2ludDtcclxuIiwiaW1wb3J0ICcuLy4uLy4uL3V0aWxpdGllcy9WZWN0b3InO1xyXG5pbXBvcnQgJy4vLi4vQW5pbWF0aW9uJztcclxuaW1wb3J0ICcuL1RleHQnO1xyXG5cclxuY2xhc3MgcFNUcmlhbmdsZSB7XHJcbiAgICAvKipcclxuICAgICogQ3JlYXRlcyBhIG5ldyBUcmlhbmdsZVxyXG4gICAgKiBAcGFyYW0gcDAgVmVjdG9yIHRvIHRoZSBmaXJzdCBwb2ludCBvZiB0aGUgdHJpYW5nbGVcclxuICAgICogQHBhcmFtIHAxIFZlY3RvciB0byB0aGUgc2Vjb25kIHBvaW50IG9mIHRoZSB0cmlhbmdsZSAoZGVmYXVsdCAoMCwgMCkpXHJcbiAgICAqIEBwYXJhbSBwMiBWZWN0b3IgdG8gdGhlIHRoaXJkIHBvaW50IG9mIHRoZSB0cmlhbmdsZSAoZGVmYXVsdCAoMCwgMCkpXHJcbiAgICAqIEBwYXJhbSBmaWxsQ29sb3IgVGhlIHRyaWFuZ2xlIGZpbGwgY29sb3IgKGRlZmF1bHQgbm9uZSlcclxuICAgICogQHBhcmFtIHN0cm9rZUNvbG9yIFRoZSB0cmlhbmdsZSBzdHJva2UgY29sb3IgKGRlZmF1bHQgbm9uZSlcclxuICAgICogQHBhcmFtIHN0cm9rZVdlaWdodCBUaGUgdHJpYW5nbGUgc3Ryb2tlV2VpZ2h0IChkZWZhdWx0IDEpXHJcbiAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocDAsIHAxID0gbmV3IFZlY3RvcigpLCBwMiA9IG5ldyBWZWN0b3IoKSwgZmlsbENvbG9yID0gJ3doaXRlJywgc3Ryb2tlQ29sb3IgPSAnbm9uZScsIHN0cm9rZVdlaWdodCA9IDEpIHtcclxuICAgICAgICB0aGlzLnNldENvb3JkaW5hdGVzKHAwLCBwMSwgcDIpO1xyXG5cclxuICAgICAgICAvLyBDb2xvcnNcclxuICAgICAgICB0aGlzLmZpbGxDb2xvciAgICA9IGZpbGxDb2xvcjtcclxuICAgICAgICB0aGlzLnN0cm9rZUNvbG9yICA9IHN0cm9rZUNvbG9yO1xyXG4gICAgICAgIHRoaXMuc3Ryb2tlV2VpZ2h0ID0gc3Ryb2tlV2VpZ2h0O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICogQHBhcmFtIHAwIFZlY3RvciB0byB0aGUgZmlyc3QgcG9pbnQgb2YgdGhlIHRyaWFuZ2xlXHJcbiAgICAqIEBwYXJhbSBwMSBWZWN0b3IgdG8gdGhlIHNlY29uZCBwb2ludCBvZiB0aGUgdHJpYW5nbGUgKGRlZmF1bHQgbGFzdCBwb2ludClcclxuICAgICogQHBhcmFtIHAyIFZlY3RvciB0byB0aGUgdGhpcmQgcG9pbnQgb2YgdGhlIHRyaWFuZ2xlIChkZWZhdWx0IGxhc3QgcG9pbnQpXHJcbiAgICAqL1xyXG4gICAgc2V0Q29vcmRpbmF0ZXMocDAsIHAxLCBwMikge1xyXG4gICAgICAgIHRoaXMucDAgPSBwMCB8fCBuZXcgVmVjdG9yKHAwLngsIHAwLnkpO1xyXG4gICAgICAgIHRoaXMucDEgPSBwMSA9PSB1bmRlZmluZWQgPyB0aGlzLnAxIDogbmV3IFZlY3RvcihwMS54LCBwMS55KTtcclxuICAgICAgICB0aGlzLnAyID0gcDIgPT0gdW5kZWZpbmVkID8gdGhpcy5wMiA6IG5ldyBWZWN0b3IocDIueCwgcDIueSk7XHJcblxyXG4gICAgICAgIC8vIFRoZSBiYXJ5Y2VudGVyLCBvciBjZW50ZXIgb2YgbWFzcy4gVGhpcyBpcyB0aGVcclxuICAgICAgICAvLyBwb2ludCBhcm91bmQgd2hpY2ggdGhlIHRyaWFuZ2xlIHdpbGwgcm90YXRlLlxyXG4gICAgICAgIHRoaXMucEcgPSBWZWN0b3IuZGl2KFZlY3Rvci5hZGQoVmVjdG9yLmFkZCh0aGlzLnAwLCB0aGlzLnAxKSwgdGhpcy5wMiksIDMpO1xyXG5cclxuICAgICAgICAvLyBUaGUgdmVjdG9ycyBwb2ludGluZyBmcm9tIHRoZSBiYXJ5Y2VudGVyIHRvIFAwLCBQMVxyXG4gICAgICAgIC8vIGFuZCBQMi4gVGhleSBhcmUgdXNlZnVsIHdoZW4gcm90YXRpbmcgdGhlIHRyaWFuZ2xlLlxyXG4gICAgICAgIHRoaXMudjAgPSBWZWN0b3Iuc3ViKHRoaXMucDAsIHRoaXMucEcpO1xyXG4gICAgICAgIHRoaXMudjEgPSBWZWN0b3Iuc3ViKHRoaXMucDEsIHRoaXMucEcpO1xyXG4gICAgICAgIHRoaXMudjIgPSBWZWN0b3Iuc3ViKHRoaXMucDIsIHRoaXMucEcpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICogUm90YXRlcyB0aGUgdHJpYW5nbGUgYnkgdGhlIHNwZWNpZmllZCBhbmdsZSwgYXJvdW5kXHJcbiAgICAqIGl0cyBjZW50ZXIgb2YgbWFzcy5cclxuICAgICogQHBhcmFtIGFuZ2xlIEFuZ2xlIG9mIHJvdGF0aW9uXHJcbiAgICAqL1xyXG4gICAgcm90YXRlKGFuZ2xlKSB7XHJcbiAgICAgICAgdGhpcy52MC5yb3RhdGUoYW5nbGUpO1xyXG4gICAgICAgIHRoaXMudjEucm90YXRlKGFuZ2xlKTtcclxuICAgICAgICB0aGlzLnYyLnJvdGF0ZShhbmdsZSk7XHJcblxyXG4gICAgICAgIHRoaXMucDAgPSBWZWN0b3IuYWRkKHRoaXMudjAsIHRoaXMucEcpO1xyXG4gICAgICAgIHRoaXMucDEgPSBWZWN0b3IuYWRkKHRoaXMudjEsIHRoaXMucEcpO1xyXG4gICAgICAgIHRoaXMucDIgPSBWZWN0b3IuYWRkKHRoaXMudjIsIHRoaXMucEcpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICogVHJhbnNsYXRlcyB0aGUgdHJpYW5nbGUgZnJvbSBpdHMgYmFyeWNlbnRlciBieSB0aGVcclxuICAgICogc3BlY2lmaWVkIGRpc3RhbmNlIGluIFggYW5kIFkuXHJcbiAgICAqIEBwYXJhbSB4IFRoZSBkaXN0YW5jZSBvbiB0aGUgWCBheGlzLlxyXG4gICAgKiBAcGFyYW0geSBUaGUgZGlzdGFuY2Ugb24gdGhlIFkgYXhpcy5cclxuICAgICovXHJcbiAgICB0cmFuc2xhdGUoeCwgeSkge1xyXG4gICAgICAgIHRoaXMuc2V0Q29vcmRpbmF0ZXMoXHJcbiAgICAgICAgICAgICAgICBWZWN0b3IuYWRkKHRoaXMucDAsIG5ldyBWZWN0b3IoeCwgeSkpLFxyXG4gICAgICAgICAgICAgICAgVmVjdG9yLmFkZCh0aGlzLnAxLCBuZXcgVmVjdG9yKHgsIHkpKSxcclxuICAgICAgICAgICAgICAgIFZlY3Rvci5hZGQodGhpcy5wMiwgbmV3IFZlY3Rvcih4LCB5KSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBUcmFuc2xhdGVzIHRoZSB0cmlhbmdsZSBmcm9tIGl0cyBiYXJ5Y2VudGVyIGJ5XHJcbiAgICAqIHRoZSBzcGVjaWZpZWQgdmVjdG9yLlxyXG4gICAgKiBAcGFyYW0gdiBUaGUgdmVjdG9yIHRvIHRyYW5zbGF0ZSB0aGUgdHJpYW5nbGUuXHJcbiAgICAqL1xyXG4gICAgdHJhbnNsYXRlKHYpIHtcclxuICAgICAgICB0aGlzLnRyYW5zbGF0ZSh2LngsIHYueSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBVcGRhdGVzIHRoZSB0cmlhbmdsZVxyXG4gICAgKiBAcGFyYW0gZHQgRGVsdGEgdGltZSBzaW5jZSBsYXN0IHVwZGF0ZVxyXG4gICAgKi9cclxuICAgIHVwZGF0ZShkdCkge31cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAqIERyYXdzIHRoZSB0cmlhbmdsZSBvbiB0aGUgc2NyZWVuLlxyXG4gICAgKi9cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgbGV0IGQgPSBfcFNpbXVsYXRpb25JbnN0YW5jZS5wbG90dGVyLmRyYXdlcjtcclxuXHJcbiAgICAgICAgaWYodGhpcy5maWxsQ29sb3IgPT0gJ25vbmUnKVxyXG4gICAgICAgICAgICBkLm5vRmlsbCgpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgZC5maWxsKHRoaXMuZmlsbENvbG9yKTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5zdHJva2VDb2xvciA9PSAnbm9uZScpXHJcbiAgICAgICAgICAgIGQubm9TdHJva2UoKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGQuc3Ryb2tlKHRoaXMuc3Ryb2tlQ29sb3IpLnN0cm9rZVdlaWdodCh0aGlzLnN0cm9rZVdlaWdodCk7XHJcblxyXG4gICAgICAgIGQucHVzaCgpXHJcbiAgICAgICAgICAgIC5iZWdpblNoYXBlKClcclxuICAgICAgICAgICAgICAgIC52ZXJ0ZXgodGhpcy5wMC54LCB0aGlzLnAwLnkpXHJcbiAgICAgICAgICAgICAgICAudmVydGV4KHRoaXMucDEueCwgdGhpcy5wMS55KVxyXG4gICAgICAgICAgICAgICAgLnZlcnRleCh0aGlzLnAyLngsIHRoaXMucDIueSlcclxuICAgICAgICAgICAgICAgIC52ZXJ0ZXgodGhpcy5wMC54LCB0aGlzLnAwLnkpXHJcbiAgICAgICAgICAgIC5lbmRTaGFwZSgpXHJcbiAgICAgICAgLnBvcCgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwU1RyaWFuZ2xlO1xyXG4iLCIvLyA9PT09PT09PT09IFBTRU5HSU5FIFZBUklBQkxFUyA9PT09PT09PT09XHJcbi8vID09PT0gQ29yZSA9PT09XHJcbmltcG9ydCBwU2ltdWxhdG9yIGZyb20gJy4vY29yZS9TaW11bGF0b3InO1xyXG5cclxuLy8gPT09PSBEcmF3ZXIgPT09PVxyXG4vLyBPYmplY3RzXHJcbmltcG9ydCBwU1BvaW50ICAgIGZyb20gJy4vZHJhd2VyL29iamVjdHMvUG9pbnQnO1xyXG5pbXBvcnQgcFNUZXh0ICAgICBmcm9tICcuL2RyYXdlci9vYmplY3RzL1RleHQnO1xyXG5pbXBvcnQgcFNUcmlhbmdsZSBmcm9tICcuL2RyYXdlci9vYmplY3RzL1RyaWFuZ2xlJztcclxuXHJcbi8vIFJvb3RcclxuaW1wb3J0IEFuaW1hdGlvbiAgZnJvbSAnLi9kcmF3ZXIvQW5pbWF0aW9uJztcclxuaW1wb3J0IHBTRHJhd2VyICAgZnJvbSAnLi9kcmF3ZXIvRHJhd2VyJztcclxuaW1wb3J0IHBTM0REcmF3ZXIgZnJvbSAnLi9kcmF3ZXIvM0REcmF3ZXInO1xyXG5pbXBvcnQgcFNQbG90dGVyICBmcm9tICcuL2RyYXdlci9QbG90dGVyJztcclxuXHJcbi8vID09PT0gVXRpbGl0aWVzID09PT1cclxuaW1wb3J0IFZlY3RvciAgICAgZnJvbSAnLi91dGlsaXRpZXMvVmVjdG9yJztcclxuXHJcblxyXG4vLyA9PT09PT09PT09IEdMT0JBTCBWQVJJQUJMRVMgPT09PT09PT09PVxyXG4vLyA9PT09IERyYXdlciA9PT09XHJcbi8vIE9iamVjdHNcclxuZ2xvYmFsLnBTUG9pbnQgICAgID0gcFNQb2ludDtcclxuZ2xvYmFsLnBTVGV4dCAgICAgID0gcFNUZXh0O1xyXG5nbG9iYWwucFNUcmlhbmdsZSAgPSBwU1RyaWFuZ2xlO1xyXG5cclxuLy8gUm9vdFxyXG5nbG9iYWwucFNBbmltYXRpb24gPSBBbmltYXRpb247XHJcblxyXG4vLyA9PT09IFV0aWxpdGllcyA9PT09XHJcbmdsb2JhbC5WZWN0b3IgICAgICA9IFZlY3RvcjtcclxuXHJcblxyXG4vLyA9PT09PT09PT09IFBTRU5HSU5FIExBVU5DSCA9PT09PT09PT09XHJcbmltcG9ydCAnLi9jb3JlL2luaXQnO1xyXG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJpbXBvcnQgcFNpbXVsYXRvciBmcm9tICcuL1NpbXVsYXRvcic7XHJcblxyXG5jbGFzcyBwU0VuZ2luZSB7XHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHRpZih3aW5kb3cucDUgPT0gdW5kZWZpbmVkKVxyXG5cdFx0XHRjb25zb2xlLmVycm9yKFxyXG5cdFx0XHRcdCdZb3UgbXVzdCBpbXBvcnQgcDUuanMgaW4gb3JkZXIgdG8gcnVuIHRoZSBQaHlzaWNzIFNpbXVsYXRpb24gRW5naW5lLicsXHJcblx0XHRcdFx0J01vcmUgaW5mb3JtYXRpb25zIG9uIHRoZSBwNSB3ZWJzaXRlIGh0dHBzOi8vcDVqcy5vcmcvLidcclxuXHRcdFx0KTtcclxuXHJcblx0XHQvLyB1c2VzIHRoZSBwNSBmdW5jdGlvbnNcclxuXHRcdHdpbmRvdy5zZXR1cCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR3aW5kb3cuX3BTaW11bGF0aW9uSW5zdGFuY2UgPSBuZXcgcFNpbXVsYXRvcigpO1xyXG5cdFx0XHR3aW5kb3cuX3BTaW11bGF0aW9uSW5zdGFuY2UuaW5zdGFuY2lhdGUoKTtcclxuXHRcdFx0d2luZG93LnBTRW5naW5lID0gd2luZG93Ll9wU2ltdWxhdGlvbkluc3RhbmNlLmdldFBTRW5naW5lVmFyKCk7XHJcblx0XHR9O1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgcFNFbmdpbmU7XHJcbiIsImltcG9ydCBwU0VuZ2luZSBmcm9tICcuL21haW4nO1xyXG5cclxuY29uc3QgX3BTZ2xvYmFsRW5naW5lSW5pdCA9ICgpID0+IHtcclxuXHRuZXcgcFNFbmdpbmUoKTtcclxufTtcclxuXHJcbmNvbnN0IHdhaXRGb3JEb2N1bWVudFJlYWR5ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgaWYoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnKSAvLyBjb21wbGV0ZVxyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgIGVsc2VcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHJlc29sdmUsIGZhbHNlKTtcclxufSk7XHJcblxyXG53YWl0Rm9yRG9jdW1lbnRSZWFkeS50aGVuKF9wU2dsb2JhbEVuZ2luZUluaXQpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcFNFbmdpbmU7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=